// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: neteq_unittest.proto

#include "neteq_unittest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace webrtc {
namespace neteq_unittest {
class NetEqNetworkStatisticsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NetEqNetworkStatistics>
      _instance;
} _NetEqNetworkStatistics_default_instance_;
class RtcpStatisticsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RtcpStatistics>
      _instance;
} _RtcpStatistics_default_instance_;
}  // namespace neteq_unittest
}  // namespace webrtc
namespace protobuf_neteq_5funittest_2eproto {
static void InitDefaultsNetEqNetworkStatistics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::neteq_unittest::_NetEqNetworkStatistics_default_instance_;
    new (ptr) ::webrtc::neteq_unittest::NetEqNetworkStatistics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::neteq_unittest::NetEqNetworkStatistics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NetEqNetworkStatistics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNetEqNetworkStatistics}, {}};

static void InitDefaultsRtcpStatistics() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::webrtc::neteq_unittest::_RtcpStatistics_default_instance_;
    new (ptr) ::webrtc::neteq_unittest::RtcpStatistics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::webrtc::neteq_unittest::RtcpStatistics::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RtcpStatistics =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRtcpStatistics}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NetEqNetworkStatistics.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RtcpStatistics.base);
}

}  // namespace protobuf_neteq_5funittest_2eproto
namespace webrtc {
namespace neteq_unittest {

// ===================================================================

void NetEqNetworkStatistics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetEqNetworkStatistics::kCurrentBufferSizeMsFieldNumber;
const int NetEqNetworkStatistics::kPreferredBufferSizeMsFieldNumber;
const int NetEqNetworkStatistics::kJitterPeaksFoundFieldNumber;
const int NetEqNetworkStatistics::kPacketLossRateFieldNumber;
const int NetEqNetworkStatistics::kPacketDiscardRateFieldNumber;
const int NetEqNetworkStatistics::kExpandRateFieldNumber;
const int NetEqNetworkStatistics::kSpeechExpandRateFieldNumber;
const int NetEqNetworkStatistics::kPreemptiveRateFieldNumber;
const int NetEqNetworkStatistics::kAccelerateRateFieldNumber;
const int NetEqNetworkStatistics::kSecondaryDecodedRateFieldNumber;
const int NetEqNetworkStatistics::kSecondaryDiscardedRateFieldNumber;
const int NetEqNetworkStatistics::kClockdriftPpmFieldNumber;
const int NetEqNetworkStatistics::kAddedZeroSamplesFieldNumber;
const int NetEqNetworkStatistics::kMeanWaitingTimeMsFieldNumber;
const int NetEqNetworkStatistics::kMedianWaitingTimeMsFieldNumber;
const int NetEqNetworkStatistics::kMinWaitingTimeMsFieldNumber;
const int NetEqNetworkStatistics::kMaxWaitingTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetEqNetworkStatistics::NetEqNetworkStatistics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_neteq_5funittest_2eproto::scc_info_NetEqNetworkStatistics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.neteq_unittest.NetEqNetworkStatistics)
}
NetEqNetworkStatistics::NetEqNetworkStatistics(const NetEqNetworkStatistics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&current_buffer_size_ms_, &from.current_buffer_size_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&secondary_discarded_rate_) -
    reinterpret_cast<char*>(&current_buffer_size_ms_)) + sizeof(secondary_discarded_rate_));
  // @@protoc_insertion_point(copy_constructor:webrtc.neteq_unittest.NetEqNetworkStatistics)
}

void NetEqNetworkStatistics::SharedCtor() {
  ::memset(&current_buffer_size_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secondary_discarded_rate_) -
      reinterpret_cast<char*>(&current_buffer_size_ms_)) + sizeof(secondary_discarded_rate_));
}

NetEqNetworkStatistics::~NetEqNetworkStatistics() {
  // @@protoc_insertion_point(destructor:webrtc.neteq_unittest.NetEqNetworkStatistics)
  SharedDtor();
}

void NetEqNetworkStatistics::SharedDtor() {
}

void NetEqNetworkStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetEqNetworkStatistics& NetEqNetworkStatistics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_neteq_5funittest_2eproto::scc_info_NetEqNetworkStatistics.base);
  return *internal_default_instance();
}


void NetEqNetworkStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.neteq_unittest.NetEqNetworkStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&current_buffer_size_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preemptive_rate_) -
        reinterpret_cast<char*>(&current_buffer_size_ms_)) + sizeof(preemptive_rate_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&accelerate_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_waiting_time_ms_) -
        reinterpret_cast<char*>(&accelerate_rate_)) + sizeof(max_waiting_time_ms_));
  }
  secondary_discarded_rate_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetEqNetworkStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.neteq_unittest.NetEqNetworkStatistics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 current_buffer_size_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_current_buffer_size_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_buffer_size_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 preferred_buffer_size_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_preferred_buffer_size_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preferred_buffer_size_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_peaks_found = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_jitter_peaks_found();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_peaks_found_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packet_loss_rate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_packet_loss_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_loss_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packet_discard_rate = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_packet_discard_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_discard_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 expand_rate = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_expand_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expand_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 speech_expand_rate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_speech_expand_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speech_expand_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 preemptive_rate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_preemptive_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preemptive_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accelerate_rate = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_accelerate_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accelerate_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 secondary_decoded_rate = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_secondary_decoded_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondary_decoded_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 clockdrift_ppm = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_clockdrift_ppm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clockdrift_ppm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 added_zero_samples = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_added_zero_samples();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &added_zero_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mean_waiting_time_ms = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_mean_waiting_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mean_waiting_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 median_waiting_time_ms = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_median_waiting_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &median_waiting_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_waiting_time_ms = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_min_waiting_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_waiting_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_waiting_time_ms = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_max_waiting_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_waiting_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 secondary_discarded_rate = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_secondary_discarded_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondary_discarded_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.neteq_unittest.NetEqNetworkStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.neteq_unittest.NetEqNetworkStatistics)
  return false;
#undef DO_
}

void NetEqNetworkStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.neteq_unittest.NetEqNetworkStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 current_buffer_size_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_buffer_size_ms(), output);
  }

  // optional uint32 preferred_buffer_size_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->preferred_buffer_size_ms(), output);
  }

  // optional uint32 jitter_peaks_found = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->jitter_peaks_found(), output);
  }

  // optional uint32 packet_loss_rate = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->packet_loss_rate(), output);
  }

  // optional uint32 packet_discard_rate = 5 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->packet_discard_rate(), output);
  }

  // optional uint32 expand_rate = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->expand_rate(), output);
  }

  // optional uint32 speech_expand_rate = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->speech_expand_rate(), output);
  }

  // optional uint32 preemptive_rate = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->preemptive_rate(), output);
  }

  // optional uint32 accelerate_rate = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->accelerate_rate(), output);
  }

  // optional uint32 secondary_decoded_rate = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->secondary_decoded_rate(), output);
  }

  // optional int32 clockdrift_ppm = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->clockdrift_ppm(), output);
  }

  // optional uint64 added_zero_samples = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->added_zero_samples(), output);
  }

  // optional int32 mean_waiting_time_ms = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mean_waiting_time_ms(), output);
  }

  // optional int32 median_waiting_time_ms = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->median_waiting_time_ms(), output);
  }

  // optional int32 min_waiting_time_ms = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->min_waiting_time_ms(), output);
  }

  // optional int32 max_waiting_time_ms = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->max_waiting_time_ms(), output);
  }

  // optional uint32 secondary_discarded_rate = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->secondary_discarded_rate(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.neteq_unittest.NetEqNetworkStatistics)
}

size_t NetEqNetworkStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.neteq_unittest.NetEqNetworkStatistics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 current_buffer_size_ms = 1;
    if (has_current_buffer_size_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_buffer_size_ms());
    }

    // optional uint32 preferred_buffer_size_ms = 2;
    if (has_preferred_buffer_size_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preferred_buffer_size_ms());
    }

    // optional uint32 jitter_peaks_found = 3;
    if (has_jitter_peaks_found()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_peaks_found());
    }

    // optional uint32 packet_loss_rate = 4;
    if (has_packet_loss_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packet_loss_rate());
    }

    // optional uint32 packet_discard_rate = 5 [deprecated = true];
    if (has_packet_discard_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packet_discard_rate());
    }

    // optional uint32 expand_rate = 6;
    if (has_expand_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expand_rate());
    }

    // optional uint32 speech_expand_rate = 7;
    if (has_speech_expand_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speech_expand_rate());
    }

    // optional uint32 preemptive_rate = 8;
    if (has_preemptive_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preemptive_rate());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 accelerate_rate = 9;
    if (has_accelerate_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accelerate_rate());
    }

    // optional uint32 secondary_decoded_rate = 10;
    if (has_secondary_decoded_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondary_decoded_rate());
    }

    // optional uint64 added_zero_samples = 12;
    if (has_added_zero_samples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->added_zero_samples());
    }

    // optional int32 clockdrift_ppm = 11;
    if (has_clockdrift_ppm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clockdrift_ppm());
    }

    // optional int32 mean_waiting_time_ms = 13;
    if (has_mean_waiting_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mean_waiting_time_ms());
    }

    // optional int32 median_waiting_time_ms = 14;
    if (has_median_waiting_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->median_waiting_time_ms());
    }

    // optional int32 min_waiting_time_ms = 15;
    if (has_min_waiting_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_waiting_time_ms());
    }

    // optional int32 max_waiting_time_ms = 16;
    if (has_max_waiting_time_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_waiting_time_ms());
    }

  }
  // optional uint32 secondary_discarded_rate = 17;
  if (has_secondary_discarded_rate()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->secondary_discarded_rate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetEqNetworkStatistics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetEqNetworkStatistics*>(&from));
}

void NetEqNetworkStatistics::MergeFrom(const NetEqNetworkStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.neteq_unittest.NetEqNetworkStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      current_buffer_size_ms_ = from.current_buffer_size_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      preferred_buffer_size_ms_ = from.preferred_buffer_size_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      jitter_peaks_found_ = from.jitter_peaks_found_;
    }
    if (cached_has_bits & 0x00000008u) {
      packet_loss_rate_ = from.packet_loss_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      packet_discard_rate_ = from.packet_discard_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      expand_rate_ = from.expand_rate_;
    }
    if (cached_has_bits & 0x00000040u) {
      speech_expand_rate_ = from.speech_expand_rate_;
    }
    if (cached_has_bits & 0x00000080u) {
      preemptive_rate_ = from.preemptive_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      accelerate_rate_ = from.accelerate_rate_;
    }
    if (cached_has_bits & 0x00000200u) {
      secondary_decoded_rate_ = from.secondary_decoded_rate_;
    }
    if (cached_has_bits & 0x00000400u) {
      added_zero_samples_ = from.added_zero_samples_;
    }
    if (cached_has_bits & 0x00000800u) {
      clockdrift_ppm_ = from.clockdrift_ppm_;
    }
    if (cached_has_bits & 0x00001000u) {
      mean_waiting_time_ms_ = from.mean_waiting_time_ms_;
    }
    if (cached_has_bits & 0x00002000u) {
      median_waiting_time_ms_ = from.median_waiting_time_ms_;
    }
    if (cached_has_bits & 0x00004000u) {
      min_waiting_time_ms_ = from.min_waiting_time_ms_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_waiting_time_ms_ = from.max_waiting_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_secondary_discarded_rate(from.secondary_discarded_rate());
  }
}

void NetEqNetworkStatistics::CopyFrom(const NetEqNetworkStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.neteq_unittest.NetEqNetworkStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetEqNetworkStatistics::IsInitialized() const {
  return true;
}

void NetEqNetworkStatistics::Swap(NetEqNetworkStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetEqNetworkStatistics::InternalSwap(NetEqNetworkStatistics* other) {
  using std::swap;
  swap(current_buffer_size_ms_, other->current_buffer_size_ms_);
  swap(preferred_buffer_size_ms_, other->preferred_buffer_size_ms_);
  swap(jitter_peaks_found_, other->jitter_peaks_found_);
  swap(packet_loss_rate_, other->packet_loss_rate_);
  swap(packet_discard_rate_, other->packet_discard_rate_);
  swap(expand_rate_, other->expand_rate_);
  swap(speech_expand_rate_, other->speech_expand_rate_);
  swap(preemptive_rate_, other->preemptive_rate_);
  swap(accelerate_rate_, other->accelerate_rate_);
  swap(secondary_decoded_rate_, other->secondary_decoded_rate_);
  swap(added_zero_samples_, other->added_zero_samples_);
  swap(clockdrift_ppm_, other->clockdrift_ppm_);
  swap(mean_waiting_time_ms_, other->mean_waiting_time_ms_);
  swap(median_waiting_time_ms_, other->median_waiting_time_ms_);
  swap(min_waiting_time_ms_, other->min_waiting_time_ms_);
  swap(max_waiting_time_ms_, other->max_waiting_time_ms_);
  swap(secondary_discarded_rate_, other->secondary_discarded_rate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string NetEqNetworkStatistics::GetTypeName() const {
  return "webrtc.neteq_unittest.NetEqNetworkStatistics";
}


// ===================================================================

void RtcpStatistics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtcpStatistics::kFractionLostFieldNumber;
const int RtcpStatistics::kCumulativeLostFieldNumber;
const int RtcpStatistics::kExtendedMaxSequenceNumberFieldNumber;
const int RtcpStatistics::kJitterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtcpStatistics::RtcpStatistics()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_neteq_5funittest_2eproto::scc_info_RtcpStatistics.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:webrtc.neteq_unittest.RtcpStatistics)
}
RtcpStatistics::RtcpStatistics(const RtcpStatistics& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fraction_lost_, &from.fraction_lost_,
    static_cast<size_t>(reinterpret_cast<char*>(&jitter_) -
    reinterpret_cast<char*>(&fraction_lost_)) + sizeof(jitter_));
  // @@protoc_insertion_point(copy_constructor:webrtc.neteq_unittest.RtcpStatistics)
}

void RtcpStatistics::SharedCtor() {
  ::memset(&fraction_lost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jitter_) -
      reinterpret_cast<char*>(&fraction_lost_)) + sizeof(jitter_));
}

RtcpStatistics::~RtcpStatistics() {
  // @@protoc_insertion_point(destructor:webrtc.neteq_unittest.RtcpStatistics)
  SharedDtor();
}

void RtcpStatistics::SharedDtor() {
}

void RtcpStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RtcpStatistics& RtcpStatistics::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_neteq_5funittest_2eproto::scc_info_RtcpStatistics.base);
  return *internal_default_instance();
}


void RtcpStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:webrtc.neteq_unittest.RtcpStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&fraction_lost_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jitter_) -
        reinterpret_cast<char*>(&fraction_lost_)) + sizeof(jitter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RtcpStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:webrtc.neteq_unittest.RtcpStatistics)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fraction_lost = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_fraction_lost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fraction_lost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cumulative_lost = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cumulative_lost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cumulative_lost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extended_max_sequence_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_extended_max_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extended_max_sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_jitter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:webrtc.neteq_unittest.RtcpStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:webrtc.neteq_unittest.RtcpStatistics)
  return false;
#undef DO_
}

void RtcpStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:webrtc.neteq_unittest.RtcpStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fraction_lost = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fraction_lost(), output);
  }

  // optional uint32 cumulative_lost = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cumulative_lost(), output);
  }

  // optional uint32 extended_max_sequence_number = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->extended_max_sequence_number(), output);
  }

  // optional uint32 jitter = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->jitter(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:webrtc.neteq_unittest.RtcpStatistics)
}

size_t RtcpStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:webrtc.neteq_unittest.RtcpStatistics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 fraction_lost = 1;
    if (has_fraction_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fraction_lost());
    }

    // optional uint32 cumulative_lost = 2;
    if (has_cumulative_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cumulative_lost());
    }

    // optional uint32 extended_max_sequence_number = 3;
    if (has_extended_max_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extended_max_sequence_number());
    }

    // optional uint32 jitter = 4;
    if (has_jitter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtcpStatistics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RtcpStatistics*>(&from));
}

void RtcpStatistics::MergeFrom(const RtcpStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:webrtc.neteq_unittest.RtcpStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      fraction_lost_ = from.fraction_lost_;
    }
    if (cached_has_bits & 0x00000002u) {
      cumulative_lost_ = from.cumulative_lost_;
    }
    if (cached_has_bits & 0x00000004u) {
      extended_max_sequence_number_ = from.extended_max_sequence_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      jitter_ = from.jitter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RtcpStatistics::CopyFrom(const RtcpStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:webrtc.neteq_unittest.RtcpStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcpStatistics::IsInitialized() const {
  return true;
}

void RtcpStatistics::Swap(RtcpStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtcpStatistics::InternalSwap(RtcpStatistics* other) {
  using std::swap;
  swap(fraction_lost_, other->fraction_lost_);
  swap(cumulative_lost_, other->cumulative_lost_);
  swap(extended_max_sequence_number_, other->extended_max_sequence_number_);
  swap(jitter_, other->jitter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RtcpStatistics::GetTypeName() const {
  return "webrtc.neteq_unittest.RtcpStatistics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace neteq_unittest
}  // namespace webrtc
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::neteq_unittest::NetEqNetworkStatistics* Arena::CreateMaybeMessage< ::webrtc::neteq_unittest::NetEqNetworkStatistics >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::neteq_unittest::NetEqNetworkStatistics >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::webrtc::neteq_unittest::RtcpStatistics* Arena::CreateMaybeMessage< ::webrtc::neteq_unittest::RtcpStatistics >(Arena* arena) {
  return Arena::CreateInternal< ::webrtc::neteq_unittest::RtcpStatistics >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
