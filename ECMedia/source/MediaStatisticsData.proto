syntax = "proto2";
option java_package = "com.yuntongxun.connector.core.protobuf";
option optimize_for = LITE_RUNTIME;

message VideoSenderStatisticsInner
{
	//common field
	optional int32 kStatsValueNameReportType = 1;
	optional int32 kStatsValueNameChannelId = 2;
	optional int64 kStatsValueNameTimestamp = 3;
	optional string kStatsValueNameCodecImplementationName = 4;

	//BWE
	optional int32 kStatsValueNameTargetEncBitrate = 7;
	optional int32 kStatsValueNameActualEncBitrate = 8;
	optional int32 kStatsValueNameAvailableSendBandwidth = 9;
	optional int32 kStatsValueNameAvailableReceiveBandwidth = 10;

	//Network
	optional int32 kStatsValueNameLossFractionInPercent = 11;
	optional int32 kStatsValueNameJitterReceived = 12;
	optional int32 kStatsValueNameRttInMs = 13;
	optional int32 kStatsValueNameBucketDelayInMs = 14;

	//RTP & RTCP
	optional int32 kStatsValueNameSsrc = 15;
	optional int32 kStatsValueNameTransmitBitrate = 16;
	optional int32 kStatsValueNameRetransmitBitrate = 17;
	optional int32 kStatsValueNameFecBitrate = 18; //reserved

	optional int32 kStatsValueNameTransmitPacketsRate = 19;
	optional int32 kStatsValueNameRetransmitPacketsRate = 20;

	optional int32 kStatsValueNamePacketsLost = 21;
	optional int32 kStatsValueNameFirsReceived = 22;
	optional int32 kStatsValueNameNacksReceived = 23;
	optional int32 kStatsValueNameNacksRequestsReceived = 24;
	optional int32 kStatsValueNameNacksUniqueRequestsReceived = 25;

	//CPU Metrics
	optional int32 kStatsValueNameAvgEncodeMs = 26;
	optional int32 kStatsValueNameEncodeUsagePercent = 27;

	//capture
	optional int32 kStatsValueNameCapturedFrameWidth = 28;
	optional int32 kStatsValueNameCapturedFrameHeight = 29;
	optional int32 kStatsValueNameCapturedFrameRate = 30;

	//QMSetting
	optional int32 kStatsValueNameQMFrameWidth = 31;
	optional int32 kStatsValueNameQMFrameHeight = 32;
	optional int32 kStatsValueNameQMFrameRate = 33;

	//CodecSetting
	optional int32 kStatsValueNameCodecSettingFrameWidth = 34;
	optional int32 kStatsValueNameCodecSettingFrameHeight = 35;
	optional int32 kStatsValueNameCodecSettingFrameRate = 36;
	optional int32 kStatsValueNameCodecSettingSimulcastNum = 37;
	optional int32 kStatsValueNameCodecSettingStartBitrate = 38;
	optional int32 kStatsValueNameCodecSettingMinBitrate = 39;
	optional int32 kStatsValueNameCodecSettingMaxBitrate = 40;
	optional int32 kStatsValueNameCodecSettingTargetBitrate = 41;
}

message VideoReceiverStatisticsInner
{
	//common field
	optional int32 kStatsValueNameReportType = 1;
	optional int32 kStatsValueNameChannelId = 2;
	optional int64 kStatsValueNameTimestamp = 3;
	optional string kStatsValueNameCodecImplementationName = 4;

	//basic
	optional int32 kStatsValueNameFrameWidthReceived = 5;
	optional int32 kStatsValueNameFrameHeightReceived = 6;
	optional int32 kStatsValueNameReceivedFrameRate = 7;
	optional int32 kStatsValueNameReceivedTotalBitrate = 8;
	optional int32 kStatsValueNameJitterBufferMs = 9;

	//decoder
	optional int32 kStatsValueNameDecoderFrameRate = 10;
	optional int32 kStatsValueNameDecodeMs = 11;
	optional int32 kStatsValueNameMaxDecodeMs = 12;

	//render
	optional int32 kStatsValueNameFrameRateRender = 13;
	optional int32 kStatsValueNameCurrentDelayMs = 14;
	optional int32 kStatsValueNameRenderDelayMs = 15;

	//rtp & rtcp
	optional int32 kStatsValueNameSsrc = 16;
	optional int32 kStatsValueNameBytesReceived = 17;
	optional int32 kStatsValueNamePacketsReceived = 18;
	optional int32 kStatsValueNameFirsSent = 19;
	optional int32 kStatsValueNameNacksSent = 20;
	optional int32 kStatsValueNameNacksRequestsSent = 21;
	optional int32 kStatsValueNameNacksUniqueRequestsSent = 22;

	//loss mode-reserved
	optional int64 kStatsValueNameLossModePart1 = 23;
	optional int64 kStatsValueNameLossModePart2 = 24;
	optional int64 kStatsValueNameLossModePart3 = 25;
	optional int64 kStatsValueNameLossModePart4 = 26;
}

message AudioSenderStatisticsInner
{
	//common field
	optional int32 kStatsValueNameReportType = 1;
	optional int32 kStatsValueNameChannelId = 2;
	optional int64 kStatsValueNameTimestamp = 3;
	optional string kStatsValueNameCodecImplementationName = 4;

	//basic
	optional int32 kStatsValueNameAudioInputLevel = 5;

	//network
	optional int32 kStatsValueNameLossFractionInPercent = 6;
	optional int32 kStatsValueNameJitterReceived = 7;
	optional int32 kStatsValueNameRttInMs = 8;

	//echo cancellation
	optional int32 kStatsValueNameEchoDelayMedian = 9;
	optional int32 kStatsValueNameEchoDelayStdDev = 10;
	optional int32 kStatsValueNameEchoReturnLoss = 11;
	optional int32 kStatsValueNameEchoReturnLossEnhancement = 12;
}

message AudioReceiverStatisticsInner
{
	//common field
	optional int32 kStatsValueNameReportType = 1;
	optional int32 kStatsValueNameChannelId = 2;
	optional int64 kStatsValueNameTimestamp = 3;
	optional string kStatsValueNameCodecImplementationName = 4;

	//basic
	optional int32 kStatsValueNameAudioOutputLevel = 5;

	//network
	optional int32 kStatsValueNameCurrentDelayMs = 6;
	optional int32 kStatsValueNameJitterBufferMs = 7;
	optional float kStatsValueNameAccelerateRate = 8;
	optional float kStatsValueNameExpandRate = 9;
	optional float kStatsValueNamePreemptiveExpandRate = 10;

	//decoder
	optional int32 kStatsValueNameDecodingNormal = 11;
	optional int32 kStatsValueNameDecodingPLC = 12;
	optional int32 kStatsValueNameDecodingCNG = 13;
	optional int32 kStatsValueNameDecodingPLCCNG = 14;

}
message MediaStatisticsInner
{
	repeated VideoSenderStatisticsInner		videoSenderStats = 1;
	repeated VideoReceiverStatisticsInner	videoReceiverStats = 2;
	repeated AudioSenderStatisticsInner		audioSenderStats = 3;
	repeated AudioReceiverStatisticsInner	audioReceiverStats = 4;
}

//定义该类，每次获取数据都是独立的，如果有取后10次的数据，可以直接对mediadata进行删减操作
message MediaStatisticsDataInner
{
	optional string callid = 1; //当前呼叫ID  userid不需要了，可以在长连接session上直接获取
	repeated MediaStatisticsInner mediadata = 2;
}
