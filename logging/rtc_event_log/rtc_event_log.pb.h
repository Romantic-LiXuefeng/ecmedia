// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtc_event_log.proto

#ifndef PROTOBUF_rtc_5fevent_5flog_2eproto__INCLUDED
#define PROTOBUF_rtc_5fevent_5flog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace yuntongxunwebrtc {
namespace rtclog {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

class EventStream;
class Event;
class RtpPacket;
class RtcpPacket;
class AudioPlayoutEvent;
class LossBasedBweUpdate;
class DelayBasedBweUpdate;
class VideoReceiveConfig;
class DecoderConfig;
class RtpHeaderExtension;
class RtxConfig;
class RtxMap;
class VideoSendConfig;
class EncoderConfig;
class AudioReceiveConfig;
class AudioSendConfig;
class AudioNetworkAdaptation;
class BweProbeCluster;
class BweProbeResult;

enum Event_EventType {
  Event_EventType_UNKNOWN_EVENT = 0,
  Event_EventType_LOG_START = 1,
  Event_EventType_LOG_END = 2,
  Event_EventType_RTP_EVENT = 3,
  Event_EventType_RTCP_EVENT = 4,
  Event_EventType_AUDIO_PLAYOUT_EVENT = 5,
  Event_EventType_LOSS_BASED_BWE_UPDATE = 6,
  Event_EventType_DELAY_BASED_BWE_UPDATE = 7,
  Event_EventType_VIDEO_RECEIVER_CONFIG_EVENT = 8,
  Event_EventType_VIDEO_SENDER_CONFIG_EVENT = 9,
  Event_EventType_AUDIO_RECEIVER_CONFIG_EVENT = 10,
  Event_EventType_AUDIO_SENDER_CONFIG_EVENT = 11,
  Event_EventType_AUDIO_NETWORK_ADAPTATION_EVENT = 16,
  Event_EventType_BWE_PROBE_CLUSTER_CREATED_EVENT = 17,
  Event_EventType_BWE_PROBE_RESULT_EVENT = 18
};
bool Event_EventType_IsValid(int value);
const Event_EventType Event_EventType_EventType_MIN = Event_EventType_UNKNOWN_EVENT;
const Event_EventType Event_EventType_EventType_MAX = Event_EventType_BWE_PROBE_RESULT_EVENT;
const int Event_EventType_EventType_ARRAYSIZE = Event_EventType_EventType_MAX + 1;

enum DelayBasedBweUpdate_DetectorState {
  DelayBasedBweUpdate_DetectorState_BWE_NORMAL = 0,
  DelayBasedBweUpdate_DetectorState_BWE_UNDERUSING = 1,
  DelayBasedBweUpdate_DetectorState_BWE_OVERUSING = 2
};
bool DelayBasedBweUpdate_DetectorState_IsValid(int value);
const DelayBasedBweUpdate_DetectorState DelayBasedBweUpdate_DetectorState_DetectorState_MIN = DelayBasedBweUpdate_DetectorState_BWE_NORMAL;
const DelayBasedBweUpdate_DetectorState DelayBasedBweUpdate_DetectorState_DetectorState_MAX = DelayBasedBweUpdate_DetectorState_BWE_OVERUSING;
const int DelayBasedBweUpdate_DetectorState_DetectorState_ARRAYSIZE = DelayBasedBweUpdate_DetectorState_DetectorState_MAX + 1;

enum VideoReceiveConfig_RtcpMode {
  VideoReceiveConfig_RtcpMode_RTCP_COMPOUND = 1,
  VideoReceiveConfig_RtcpMode_RTCP_REDUCEDSIZE = 2
};
bool VideoReceiveConfig_RtcpMode_IsValid(int value);
const VideoReceiveConfig_RtcpMode VideoReceiveConfig_RtcpMode_RtcpMode_MIN = VideoReceiveConfig_RtcpMode_RTCP_COMPOUND;
const VideoReceiveConfig_RtcpMode VideoReceiveConfig_RtcpMode_RtcpMode_MAX = VideoReceiveConfig_RtcpMode_RTCP_REDUCEDSIZE;
const int VideoReceiveConfig_RtcpMode_RtcpMode_ARRAYSIZE = VideoReceiveConfig_RtcpMode_RtcpMode_MAX + 1;

enum BweProbeResult_ResultType {
  BweProbeResult_ResultType_SUCCESS = 0,
  BweProbeResult_ResultType_INVALID_SEND_RECEIVE_INTERVAL = 1,
  BweProbeResult_ResultType_INVALID_SEND_RECEIVE_RATIO = 2,
  BweProbeResult_ResultType_TIMEOUT = 3
};
bool BweProbeResult_ResultType_IsValid(int value);
const BweProbeResult_ResultType BweProbeResult_ResultType_ResultType_MIN = BweProbeResult_ResultType_SUCCESS;
const BweProbeResult_ResultType BweProbeResult_ResultType_ResultType_MAX = BweProbeResult_ResultType_TIMEOUT;
const int BweProbeResult_ResultType_ResultType_ARRAYSIZE = BweProbeResult_ResultType_ResultType_MAX + 1;

enum MediaType {
  ANY = 0,
  AUDIO = 1,
  VIDEO = 2,
  DATA = 3
};
bool MediaType_IsValid(int value);
const MediaType MediaType_MIN = ANY;
const MediaType MediaType_MAX = DATA;
const int MediaType_ARRAYSIZE = MediaType_MAX + 1;

// ===================================================================

class EventStream : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  EventStream();
  virtual ~EventStream();

  EventStream(const EventStream& from);

  inline EventStream& operator=(const EventStream& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const EventStream& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const EventStream* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(EventStream* other);

  // implements Message ----------------------------------------------

  EventStream* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const EventStream& from);
  void MergeFrom(const EventStream& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .webrtc.rtclog.Event stream = 1;
  inline int stream_size() const;
  inline void clear_stream();
  static const int kStreamFieldNumber = 1;
  inline const ::yuntongxunwebrtc::rtclog::Event& stream(int index) const;
  inline ::yuntongxunwebrtc::rtclog::Event* mutable_stream(int index);
  inline ::yuntongxunwebrtc::rtclog::Event* add_stream();
  inline const ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::Event >&
      stream() const;
  inline ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::Event >*
      mutable_stream();

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.EventStream)
 private:

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::Event > stream_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static EventStream* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const Event& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Event* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  Event* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Event_EventType EventType;
  static const EventType UNKNOWN_EVENT = Event_EventType_UNKNOWN_EVENT;
  static const EventType LOG_START = Event_EventType_LOG_START;
  static const EventType LOG_END = Event_EventType_LOG_END;
  static const EventType RTP_EVENT = Event_EventType_RTP_EVENT;
  static const EventType RTCP_EVENT = Event_EventType_RTCP_EVENT;
  static const EventType AUDIO_PLAYOUT_EVENT = Event_EventType_AUDIO_PLAYOUT_EVENT;
  static const EventType LOSS_BASED_BWE_UPDATE = Event_EventType_LOSS_BASED_BWE_UPDATE;
  static const EventType DELAY_BASED_BWE_UPDATE = Event_EventType_DELAY_BASED_BWE_UPDATE;
  static const EventType VIDEO_RECEIVER_CONFIG_EVENT = Event_EventType_VIDEO_RECEIVER_CONFIG_EVENT;
  static const EventType VIDEO_SENDER_CONFIG_EVENT = Event_EventType_VIDEO_SENDER_CONFIG_EVENT;
  static const EventType AUDIO_RECEIVER_CONFIG_EVENT = Event_EventType_AUDIO_RECEIVER_CONFIG_EVENT;
  static const EventType AUDIO_SENDER_CONFIG_EVENT = Event_EventType_AUDIO_SENDER_CONFIG_EVENT;
  static const EventType AUDIO_NETWORK_ADAPTATION_EVENT = Event_EventType_AUDIO_NETWORK_ADAPTATION_EVENT;
  static const EventType BWE_PROBE_CLUSTER_CREATED_EVENT = Event_EventType_BWE_PROBE_CLUSTER_CREATED_EVENT;
  static const EventType BWE_PROBE_RESULT_EVENT = Event_EventType_BWE_PROBE_RESULT_EVENT;
  static inline bool EventType_IsValid(int value) {
    return Event_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    Event_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    Event_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    Event_EventType_EventType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int64 timestamp_us = 1;
  inline bool has_timestamp_us() const;
  inline void clear_timestamp_us();
  static const int kTimestampUsFieldNumber = 1;
  inline ::yuntongxun_google::protobuf::int64 timestamp_us() const;
  inline void set_timestamp_us(::yuntongxun_google::protobuf::int64 value);

  // optional .webrtc.rtclog.Event.EventType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::yuntongxunwebrtc::rtclog::Event_EventType type() const;
  inline void set_type(::yuntongxunwebrtc::rtclog::Event_EventType value);

  // optional .webrtc.rtclog.RtpPacket rtp_packet = 3;
  inline bool has_rtp_packet() const;
  inline void clear_rtp_packet();
  static const int kRtpPacketFieldNumber = 3;
  inline const ::yuntongxunwebrtc::rtclog::RtpPacket& rtp_packet() const;
  inline ::yuntongxunwebrtc::rtclog::RtpPacket* mutable_rtp_packet();
  inline ::yuntongxunwebrtc::rtclog::RtpPacket* release_rtp_packet();
  inline void set_allocated_rtp_packet(::yuntongxunwebrtc::rtclog::RtpPacket* rtp_packet);

  // optional .webrtc.rtclog.RtcpPacket rtcp_packet = 4;
  inline bool has_rtcp_packet() const;
  inline void clear_rtcp_packet();
  static const int kRtcpPacketFieldNumber = 4;
  inline const ::yuntongxunwebrtc::rtclog::RtcpPacket& rtcp_packet() const;
  inline ::yuntongxunwebrtc::rtclog::RtcpPacket* mutable_rtcp_packet();
  inline ::yuntongxunwebrtc::rtclog::RtcpPacket* release_rtcp_packet();
  inline void set_allocated_rtcp_packet(::yuntongxunwebrtc::rtclog::RtcpPacket* rtcp_packet);

  // optional .webrtc.rtclog.AudioPlayoutEvent audio_playout_event = 5;
  inline bool has_audio_playout_event() const;
  inline void clear_audio_playout_event();
  static const int kAudioPlayoutEventFieldNumber = 5;
  inline const ::yuntongxunwebrtc::rtclog::AudioPlayoutEvent& audio_playout_event() const;
  inline ::yuntongxunwebrtc::rtclog::AudioPlayoutEvent* mutable_audio_playout_event();
  inline ::yuntongxunwebrtc::rtclog::AudioPlayoutEvent* release_audio_playout_event();
  inline void set_allocated_audio_playout_event(::yuntongxunwebrtc::rtclog::AudioPlayoutEvent* audio_playout_event);

  // optional .webrtc.rtclog.LossBasedBweUpdate loss_based_bwe_update = 6;
  inline bool has_loss_based_bwe_update() const;
  inline void clear_loss_based_bwe_update();
  static const int kLossBasedBweUpdateFieldNumber = 6;
  inline const ::yuntongxunwebrtc::rtclog::LossBasedBweUpdate& loss_based_bwe_update() const;
  inline ::yuntongxunwebrtc::rtclog::LossBasedBweUpdate* mutable_loss_based_bwe_update();
  inline ::yuntongxunwebrtc::rtclog::LossBasedBweUpdate* release_loss_based_bwe_update();
  inline void set_allocated_loss_based_bwe_update(::yuntongxunwebrtc::rtclog::LossBasedBweUpdate* loss_based_bwe_update);

  // optional .webrtc.rtclog.DelayBasedBweUpdate delay_based_bwe_update = 7;
  inline bool has_delay_based_bwe_update() const;
  inline void clear_delay_based_bwe_update();
  static const int kDelayBasedBweUpdateFieldNumber = 7;
  inline const ::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate& delay_based_bwe_update() const;
  inline ::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate* mutable_delay_based_bwe_update();
  inline ::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate* release_delay_based_bwe_update();
  inline void set_allocated_delay_based_bwe_update(::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate* delay_based_bwe_update);

  // optional .webrtc.rtclog.VideoReceiveConfig video_receiver_config = 8;
  inline bool has_video_receiver_config() const;
  inline void clear_video_receiver_config();
  static const int kVideoReceiverConfigFieldNumber = 8;
  inline const ::yuntongxunwebrtc::rtclog::VideoReceiveConfig& video_receiver_config() const;
  inline ::yuntongxunwebrtc::rtclog::VideoReceiveConfig* mutable_video_receiver_config();
  inline ::yuntongxunwebrtc::rtclog::VideoReceiveConfig* release_video_receiver_config();
  inline void set_allocated_video_receiver_config(::yuntongxunwebrtc::rtclog::VideoReceiveConfig* video_receiver_config);

  // optional .webrtc.rtclog.VideoSendConfig video_sender_config = 9;
  inline bool has_video_sender_config() const;
  inline void clear_video_sender_config();
  static const int kVideoSenderConfigFieldNumber = 9;
  inline const ::yuntongxunwebrtc::rtclog::VideoSendConfig& video_sender_config() const;
  inline ::yuntongxunwebrtc::rtclog::VideoSendConfig* mutable_video_sender_config();
  inline ::yuntongxunwebrtc::rtclog::VideoSendConfig* release_video_sender_config();
  inline void set_allocated_video_sender_config(::yuntongxunwebrtc::rtclog::VideoSendConfig* video_sender_config);

  // optional .webrtc.rtclog.AudioReceiveConfig audio_receiver_config = 10;
  inline bool has_audio_receiver_config() const;
  inline void clear_audio_receiver_config();
  static const int kAudioReceiverConfigFieldNumber = 10;
  inline const ::yuntongxunwebrtc::rtclog::AudioReceiveConfig& audio_receiver_config() const;
  inline ::yuntongxunwebrtc::rtclog::AudioReceiveConfig* mutable_audio_receiver_config();
  inline ::yuntongxunwebrtc::rtclog::AudioReceiveConfig* release_audio_receiver_config();
  inline void set_allocated_audio_receiver_config(::yuntongxunwebrtc::rtclog::AudioReceiveConfig* audio_receiver_config);

  // optional .webrtc.rtclog.AudioSendConfig audio_sender_config = 11;
  inline bool has_audio_sender_config() const;
  inline void clear_audio_sender_config();
  static const int kAudioSenderConfigFieldNumber = 11;
  inline const ::yuntongxunwebrtc::rtclog::AudioSendConfig& audio_sender_config() const;
  inline ::yuntongxunwebrtc::rtclog::AudioSendConfig* mutable_audio_sender_config();
  inline ::yuntongxunwebrtc::rtclog::AudioSendConfig* release_audio_sender_config();
  inline void set_allocated_audio_sender_config(::yuntongxunwebrtc::rtclog::AudioSendConfig* audio_sender_config);

  // optional .webrtc.rtclog.AudioNetworkAdaptation audio_network_adaptation = 16;
  inline bool has_audio_network_adaptation() const;
  inline void clear_audio_network_adaptation();
  static const int kAudioNetworkAdaptationFieldNumber = 16;
  inline const ::yuntongxunwebrtc::rtclog::AudioNetworkAdaptation& audio_network_adaptation() const;
  inline ::yuntongxunwebrtc::rtclog::AudioNetworkAdaptation* mutable_audio_network_adaptation();
  inline ::yuntongxunwebrtc::rtclog::AudioNetworkAdaptation* release_audio_network_adaptation();
  inline void set_allocated_audio_network_adaptation(::yuntongxunwebrtc::rtclog::AudioNetworkAdaptation* audio_network_adaptation);

  // optional .webrtc.rtclog.BweProbeCluster probe_cluster = 17;
  inline bool has_probe_cluster() const;
  inline void clear_probe_cluster();
  static const int kProbeClusterFieldNumber = 17;
  inline const ::yuntongxunwebrtc::rtclog::BweProbeCluster& probe_cluster() const;
  inline ::yuntongxunwebrtc::rtclog::BweProbeCluster* mutable_probe_cluster();
  inline ::yuntongxunwebrtc::rtclog::BweProbeCluster* release_probe_cluster();
  inline void set_allocated_probe_cluster(::yuntongxunwebrtc::rtclog::BweProbeCluster* probe_cluster);

  // optional .webrtc.rtclog.BweProbeResult probe_result = 18;
  inline bool has_probe_result() const;
  inline void clear_probe_result();
  static const int kProbeResultFieldNumber = 18;
  inline const ::yuntongxunwebrtc::rtclog::BweProbeResult& probe_result() const;
  inline ::yuntongxunwebrtc::rtclog::BweProbeResult* mutable_probe_result();
  inline ::yuntongxunwebrtc::rtclog::BweProbeResult* release_probe_result();
  inline void set_allocated_probe_result(::yuntongxunwebrtc::rtclog::BweProbeResult* probe_result);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.Event)
 private:
  inline void set_has_timestamp_us();
  inline void clear_has_timestamp_us();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_rtp_packet();
  inline void clear_has_rtp_packet();
  inline void set_has_rtcp_packet();
  inline void clear_has_rtcp_packet();
  inline void set_has_audio_playout_event();
  inline void clear_has_audio_playout_event();
  inline void set_has_loss_based_bwe_update();
  inline void clear_has_loss_based_bwe_update();
  inline void set_has_delay_based_bwe_update();
  inline void clear_has_delay_based_bwe_update();
  inline void set_has_video_receiver_config();
  inline void clear_has_video_receiver_config();
  inline void set_has_video_sender_config();
  inline void clear_has_video_sender_config();
  inline void set_has_audio_receiver_config();
  inline void clear_has_audio_receiver_config();
  inline void set_has_audio_sender_config();
  inline void clear_has_audio_sender_config();
  inline void set_has_audio_network_adaptation();
  inline void clear_has_audio_network_adaptation();
  inline void set_has_probe_cluster();
  inline void clear_has_probe_cluster();
  inline void set_has_probe_result();
  inline void clear_has_probe_result();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yuntongxun_google::protobuf::int64 timestamp_us_;
  ::yuntongxunwebrtc::rtclog::RtpPacket* rtp_packet_;
  ::yuntongxunwebrtc::rtclog::RtcpPacket* rtcp_packet_;
  ::yuntongxunwebrtc::rtclog::AudioPlayoutEvent* audio_playout_event_;
  ::yuntongxunwebrtc::rtclog::LossBasedBweUpdate* loss_based_bwe_update_;
  ::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate* delay_based_bwe_update_;
  ::yuntongxunwebrtc::rtclog::VideoReceiveConfig* video_receiver_config_;
  ::yuntongxunwebrtc::rtclog::VideoSendConfig* video_sender_config_;
  ::yuntongxunwebrtc::rtclog::AudioReceiveConfig* audio_receiver_config_;
  ::yuntongxunwebrtc::rtclog::AudioSendConfig* audio_sender_config_;
  ::yuntongxunwebrtc::rtclog::AudioNetworkAdaptation* audio_network_adaptation_;
  ::yuntongxunwebrtc::rtclog::BweProbeCluster* probe_cluster_;
  ::yuntongxunwebrtc::rtclog::BweProbeResult* probe_result_;
  int type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// -------------------------------------------------------------------

class RtpPacket : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  RtpPacket();
  virtual ~RtpPacket();

  RtpPacket(const RtpPacket& from);

  inline RtpPacket& operator=(const RtpPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const RtpPacket& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RtpPacket* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RtpPacket* other);

  // implements Message ----------------------------------------------

  RtpPacket* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const RtpPacket& from);
  void MergeFrom(const RtpPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool incoming = 1;
  inline bool has_incoming() const;
  inline void clear_incoming();
  static const int kIncomingFieldNumber = 1;
  inline bool incoming() const;
  inline void set_incoming(bool value);

  // optional .webrtc.rtclog.MediaType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::yuntongxunwebrtc::rtclog::MediaType type() const;
  inline void set_type(::yuntongxunwebrtc::rtclog::MediaType value);

  // optional uint32 packet_length = 3;
  inline bool has_packet_length() const;
  inline void clear_packet_length();
  static const int kPacketLengthFieldNumber = 3;
  inline ::yuntongxun_google::protobuf::uint32 packet_length() const;
  inline void set_packet_length(::yuntongxun_google::protobuf::uint32 value);

  // optional bytes header = 4;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 4;
  inline const ::std::string& header() const;
  inline void set_header(const ::std::string& value);
  inline void set_header(const char* value);
  inline void set_header(const void* value, size_t size);
  inline ::std::string* mutable_header();
  inline ::std::string* release_header();
  inline void set_allocated_header(::std::string* header);

  // optional uint32 probe_cluster_id = 5;
  inline bool has_probe_cluster_id() const;
  inline void clear_probe_cluster_id();
  static const int kProbeClusterIdFieldNumber = 5;
  inline ::yuntongxun_google::protobuf::uint32 probe_cluster_id() const;
  inline void set_probe_cluster_id(::yuntongxun_google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.RtpPacket)
 private:
  inline void set_has_incoming();
  inline void clear_has_incoming();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_packet_length();
  inline void clear_has_packet_length();
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_probe_cluster_id();
  inline void clear_has_probe_cluster_id();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool incoming_;
  int type_;
  ::std::string* header_;
  ::yuntongxun_google::protobuf::uint32 packet_length_;
  ::yuntongxun_google::protobuf::uint32 probe_cluster_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static RtpPacket* default_instance_;
};
// -------------------------------------------------------------------

class RtcpPacket : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  RtcpPacket();
  virtual ~RtcpPacket();

  RtcpPacket(const RtcpPacket& from);

  inline RtcpPacket& operator=(const RtcpPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const RtcpPacket& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RtcpPacket* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RtcpPacket* other);

  // implements Message ----------------------------------------------

  RtcpPacket* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const RtcpPacket& from);
  void MergeFrom(const RtcpPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool incoming = 1;
  inline bool has_incoming() const;
  inline void clear_incoming();
  static const int kIncomingFieldNumber = 1;
  inline bool incoming() const;
  inline void set_incoming(bool value);

  // optional .webrtc.rtclog.MediaType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::yuntongxunwebrtc::rtclog::MediaType type() const;
  inline void set_type(::yuntongxunwebrtc::rtclog::MediaType value);

  // optional bytes packet_data = 3;
  inline bool has_packet_data() const;
  inline void clear_packet_data();
  static const int kPacketDataFieldNumber = 3;
  inline const ::std::string& packet_data() const;
  inline void set_packet_data(const ::std::string& value);
  inline void set_packet_data(const char* value);
  inline void set_packet_data(const void* value, size_t size);
  inline ::std::string* mutable_packet_data();
  inline ::std::string* release_packet_data();
  inline void set_allocated_packet_data(::std::string* packet_data);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.RtcpPacket)
 private:
  inline void set_has_incoming();
  inline void clear_has_incoming();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_packet_data();
  inline void clear_has_packet_data();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool incoming_;
  int type_;
  ::std::string* packet_data_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static RtcpPacket* default_instance_;
};
// -------------------------------------------------------------------

class AudioPlayoutEvent : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  AudioPlayoutEvent();
  virtual ~AudioPlayoutEvent();

  AudioPlayoutEvent(const AudioPlayoutEvent& from);

  inline AudioPlayoutEvent& operator=(const AudioPlayoutEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AudioPlayoutEvent& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AudioPlayoutEvent* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AudioPlayoutEvent* other);

  // implements Message ----------------------------------------------

  AudioPlayoutEvent* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const AudioPlayoutEvent& from);
  void MergeFrom(const AudioPlayoutEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 local_ssrc = 2;
  inline bool has_local_ssrc() const;
  inline void clear_local_ssrc();
  static const int kLocalSsrcFieldNumber = 2;
  inline ::yuntongxun_google::protobuf::uint32 local_ssrc() const;
  inline void set_local_ssrc(::yuntongxun_google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.AudioPlayoutEvent)
 private:
  inline void set_has_local_ssrc();
  inline void clear_has_local_ssrc();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yuntongxun_google::protobuf::uint32 local_ssrc_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static AudioPlayoutEvent* default_instance_;
};
// -------------------------------------------------------------------

class LossBasedBweUpdate : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  LossBasedBweUpdate();
  virtual ~LossBasedBweUpdate();

  LossBasedBweUpdate(const LossBasedBweUpdate& from);

  inline LossBasedBweUpdate& operator=(const LossBasedBweUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const LossBasedBweUpdate& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LossBasedBweUpdate* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LossBasedBweUpdate* other);

  // implements Message ----------------------------------------------

  LossBasedBweUpdate* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const LossBasedBweUpdate& from);
  void MergeFrom(const LossBasedBweUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bitrate_bps = 1;
  inline bool has_bitrate_bps() const;
  inline void clear_bitrate_bps();
  static const int kBitrateBpsFieldNumber = 1;
  inline ::yuntongxun_google::protobuf::int32 bitrate_bps() const;
  inline void set_bitrate_bps(::yuntongxun_google::protobuf::int32 value);

  // optional uint32 fraction_loss = 2;
  inline bool has_fraction_loss() const;
  inline void clear_fraction_loss();
  static const int kFractionLossFieldNumber = 2;
  inline ::yuntongxun_google::protobuf::uint32 fraction_loss() const;
  inline void set_fraction_loss(::yuntongxun_google::protobuf::uint32 value);

  // optional int32 total_packets = 3;
  inline bool has_total_packets() const;
  inline void clear_total_packets();
  static const int kTotalPacketsFieldNumber = 3;
  inline ::yuntongxun_google::protobuf::int32 total_packets() const;
  inline void set_total_packets(::yuntongxun_google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.LossBasedBweUpdate)
 private:
  inline void set_has_bitrate_bps();
  inline void clear_has_bitrate_bps();
  inline void set_has_fraction_loss();
  inline void clear_has_fraction_loss();
  inline void set_has_total_packets();
  inline void clear_has_total_packets();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yuntongxun_google::protobuf::int32 bitrate_bps_;
  ::yuntongxun_google::protobuf::uint32 fraction_loss_;
  ::yuntongxun_google::protobuf::int32 total_packets_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static LossBasedBweUpdate* default_instance_;
};
// -------------------------------------------------------------------

class DelayBasedBweUpdate : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  DelayBasedBweUpdate();
  virtual ~DelayBasedBweUpdate();

  DelayBasedBweUpdate(const DelayBasedBweUpdate& from);

  inline DelayBasedBweUpdate& operator=(const DelayBasedBweUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DelayBasedBweUpdate& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DelayBasedBweUpdate* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DelayBasedBweUpdate* other);

  // implements Message ----------------------------------------------

  DelayBasedBweUpdate* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const DelayBasedBweUpdate& from);
  void MergeFrom(const DelayBasedBweUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef DelayBasedBweUpdate_DetectorState DetectorState;
  static const DetectorState BWE_NORMAL = DelayBasedBweUpdate_DetectorState_BWE_NORMAL;
  static const DetectorState BWE_UNDERUSING = DelayBasedBweUpdate_DetectorState_BWE_UNDERUSING;
  static const DetectorState BWE_OVERUSING = DelayBasedBweUpdate_DetectorState_BWE_OVERUSING;
  static inline bool DetectorState_IsValid(int value) {
    return DelayBasedBweUpdate_DetectorState_IsValid(value);
  }
  static const DetectorState DetectorState_MIN =
    DelayBasedBweUpdate_DetectorState_DetectorState_MIN;
  static const DetectorState DetectorState_MAX =
    DelayBasedBweUpdate_DetectorState_DetectorState_MAX;
  static const int DetectorState_ARRAYSIZE =
    DelayBasedBweUpdate_DetectorState_DetectorState_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 bitrate_bps = 1;
  inline bool has_bitrate_bps() const;
  inline void clear_bitrate_bps();
  static const int kBitrateBpsFieldNumber = 1;
  inline ::yuntongxun_google::protobuf::int32 bitrate_bps() const;
  inline void set_bitrate_bps(::yuntongxun_google::protobuf::int32 value);

  // optional .webrtc.rtclog.DelayBasedBweUpdate.DetectorState detector_state = 2;
  inline bool has_detector_state() const;
  inline void clear_detector_state();
  static const int kDetectorStateFieldNumber = 2;
  inline ::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate_DetectorState detector_state() const;
  inline void set_detector_state(::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate_DetectorState value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.DelayBasedBweUpdate)
 private:
  inline void set_has_bitrate_bps();
  inline void clear_has_bitrate_bps();
  inline void set_has_detector_state();
  inline void clear_has_detector_state();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yuntongxun_google::protobuf::int32 bitrate_bps_;
  int detector_state_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static DelayBasedBweUpdate* default_instance_;
};
// -------------------------------------------------------------------

class VideoReceiveConfig : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  VideoReceiveConfig();
  virtual ~VideoReceiveConfig();

  VideoReceiveConfig(const VideoReceiveConfig& from);

  inline VideoReceiveConfig& operator=(const VideoReceiveConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const VideoReceiveConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const VideoReceiveConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(VideoReceiveConfig* other);

  // implements Message ----------------------------------------------

  VideoReceiveConfig* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const VideoReceiveConfig& from);
  void MergeFrom(const VideoReceiveConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef VideoReceiveConfig_RtcpMode RtcpMode;
  static const RtcpMode RTCP_COMPOUND = VideoReceiveConfig_RtcpMode_RTCP_COMPOUND;
  static const RtcpMode RTCP_REDUCEDSIZE = VideoReceiveConfig_RtcpMode_RTCP_REDUCEDSIZE;
  static inline bool RtcpMode_IsValid(int value) {
    return VideoReceiveConfig_RtcpMode_IsValid(value);
  }
  static const RtcpMode RtcpMode_MIN =
    VideoReceiveConfig_RtcpMode_RtcpMode_MIN;
  static const RtcpMode RtcpMode_MAX =
    VideoReceiveConfig_RtcpMode_RtcpMode_MAX;
  static const int RtcpMode_ARRAYSIZE =
    VideoReceiveConfig_RtcpMode_RtcpMode_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional uint32 remote_ssrc = 1;
  inline bool has_remote_ssrc() const;
  inline void clear_remote_ssrc();
  static const int kRemoteSsrcFieldNumber = 1;
  inline ::yuntongxun_google::protobuf::uint32 remote_ssrc() const;
  inline void set_remote_ssrc(::yuntongxun_google::protobuf::uint32 value);

  // optional uint32 local_ssrc = 2;
  inline bool has_local_ssrc() const;
  inline void clear_local_ssrc();
  static const int kLocalSsrcFieldNumber = 2;
  inline ::yuntongxun_google::protobuf::uint32 local_ssrc() const;
  inline void set_local_ssrc(::yuntongxun_google::protobuf::uint32 value);

  // optional .webrtc.rtclog.VideoReceiveConfig.RtcpMode rtcp_mode = 3;
  inline bool has_rtcp_mode() const;
  inline void clear_rtcp_mode();
  static const int kRtcpModeFieldNumber = 3;
  inline ::yuntongxunwebrtc::rtclog::VideoReceiveConfig_RtcpMode rtcp_mode() const;
  inline void set_rtcp_mode(::yuntongxunwebrtc::rtclog::VideoReceiveConfig_RtcpMode value);

  // optional bool remb = 4;
  inline bool has_remb() const;
  inline void clear_remb();
  static const int kRembFieldNumber = 4;
  inline bool remb() const;
  inline void set_remb(bool value);

  // repeated .webrtc.rtclog.RtxMap rtx_map = 5;
  inline int rtx_map_size() const;
  inline void clear_rtx_map();
  static const int kRtxMapFieldNumber = 5;
  inline const ::yuntongxunwebrtc::rtclog::RtxMap& rtx_map(int index) const;
  inline ::yuntongxunwebrtc::rtclog::RtxMap* mutable_rtx_map(int index);
  inline ::yuntongxunwebrtc::rtclog::RtxMap* add_rtx_map();
  inline const ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtxMap >&
      rtx_map() const;
  inline ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtxMap >*
      mutable_rtx_map();

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 6;
  inline int header_extensions_size() const;
  inline void clear_header_extensions();
  static const int kHeaderExtensionsFieldNumber = 6;
  inline const ::yuntongxunwebrtc::rtclog::RtpHeaderExtension& header_extensions(int index) const;
  inline ::yuntongxunwebrtc::rtclog::RtpHeaderExtension* mutable_header_extensions(int index);
  inline ::yuntongxunwebrtc::rtclog::RtpHeaderExtension* add_header_extensions();
  inline const ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension >&
      header_extensions() const;
  inline ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension >*
      mutable_header_extensions();

  // repeated .webrtc.rtclog.DecoderConfig decoders = 7;
  inline int decoders_size() const;
  inline void clear_decoders();
  static const int kDecodersFieldNumber = 7;
  inline const ::yuntongxunwebrtc::rtclog::DecoderConfig& decoders(int index) const;
  inline ::yuntongxunwebrtc::rtclog::DecoderConfig* mutable_decoders(int index);
  inline ::yuntongxunwebrtc::rtclog::DecoderConfig* add_decoders();
  inline const ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::DecoderConfig >&
      decoders() const;
  inline ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::DecoderConfig >*
      mutable_decoders();

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.VideoReceiveConfig)
 private:
  inline void set_has_remote_ssrc();
  inline void clear_has_remote_ssrc();
  inline void set_has_local_ssrc();
  inline void clear_has_local_ssrc();
  inline void set_has_rtcp_mode();
  inline void clear_has_rtcp_mode();
  inline void set_has_remb();
  inline void clear_has_remb();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yuntongxun_google::protobuf::uint32 remote_ssrc_;
  ::yuntongxun_google::protobuf::uint32 local_ssrc_;
  int rtcp_mode_;
  bool remb_;
  ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtxMap > rtx_map_;
  ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension > header_extensions_;
  ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::DecoderConfig > decoders_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static VideoReceiveConfig* default_instance_;
};
// -------------------------------------------------------------------

class DecoderConfig : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  DecoderConfig();
  virtual ~DecoderConfig();

  DecoderConfig(const DecoderConfig& from);

  inline DecoderConfig& operator=(const DecoderConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const DecoderConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DecoderConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DecoderConfig* other);

  // implements Message ----------------------------------------------

  DecoderConfig* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const DecoderConfig& from);
  void MergeFrom(const DecoderConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 payload_type = 2;
  inline bool has_payload_type() const;
  inline void clear_payload_type();
  static const int kPayloadTypeFieldNumber = 2;
  inline ::yuntongxun_google::protobuf::int32 payload_type() const;
  inline void set_payload_type(::yuntongxun_google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.DecoderConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_payload_type();
  inline void clear_has_payload_type();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::yuntongxun_google::protobuf::int32 payload_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static DecoderConfig* default_instance_;
};
// -------------------------------------------------------------------

class RtpHeaderExtension : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  RtpHeaderExtension();
  virtual ~RtpHeaderExtension();

  RtpHeaderExtension(const RtpHeaderExtension& from);

  inline RtpHeaderExtension& operator=(const RtpHeaderExtension& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const RtpHeaderExtension& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RtpHeaderExtension* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RtpHeaderExtension* other);

  // implements Message ----------------------------------------------

  RtpHeaderExtension* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const RtpHeaderExtension& from);
  void MergeFrom(const RtpHeaderExtension& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::yuntongxun_google::protobuf::int32 id() const;
  inline void set_id(::yuntongxun_google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.RtpHeaderExtension)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::yuntongxun_google::protobuf::int32 id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static RtpHeaderExtension* default_instance_;
};
// -------------------------------------------------------------------

class RtxConfig : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  RtxConfig();
  virtual ~RtxConfig();

  RtxConfig(const RtxConfig& from);

  inline RtxConfig& operator=(const RtxConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const RtxConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RtxConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RtxConfig* other);

  // implements Message ----------------------------------------------

  RtxConfig* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const RtxConfig& from);
  void MergeFrom(const RtxConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rtx_ssrc = 1;
  inline bool has_rtx_ssrc() const;
  inline void clear_rtx_ssrc();
  static const int kRtxSsrcFieldNumber = 1;
  inline ::yuntongxun_google::protobuf::uint32 rtx_ssrc() const;
  inline void set_rtx_ssrc(::yuntongxun_google::protobuf::uint32 value);

  // optional int32 rtx_payload_type = 2;
  inline bool has_rtx_payload_type() const;
  inline void clear_rtx_payload_type();
  static const int kRtxPayloadTypeFieldNumber = 2;
  inline ::yuntongxun_google::protobuf::int32 rtx_payload_type() const;
  inline void set_rtx_payload_type(::yuntongxun_google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.RtxConfig)
 private:
  inline void set_has_rtx_ssrc();
  inline void clear_has_rtx_ssrc();
  inline void set_has_rtx_payload_type();
  inline void clear_has_rtx_payload_type();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yuntongxun_google::protobuf::uint32 rtx_ssrc_;
  ::yuntongxun_google::protobuf::int32 rtx_payload_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static RtxConfig* default_instance_;
};
// -------------------------------------------------------------------

class RtxMap : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  RtxMap();
  virtual ~RtxMap();

  RtxMap(const RtxMap& from);

  inline RtxMap& operator=(const RtxMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const RtxMap& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RtxMap* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RtxMap* other);

  // implements Message ----------------------------------------------

  RtxMap* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const RtxMap& from);
  void MergeFrom(const RtxMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 payload_type = 1;
  inline bool has_payload_type() const;
  inline void clear_payload_type();
  static const int kPayloadTypeFieldNumber = 1;
  inline ::yuntongxun_google::protobuf::int32 payload_type() const;
  inline void set_payload_type(::yuntongxun_google::protobuf::int32 value);

  // optional .webrtc.rtclog.RtxConfig config = 2;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 2;
  inline const ::yuntongxunwebrtc::rtclog::RtxConfig& config() const;
  inline ::yuntongxunwebrtc::rtclog::RtxConfig* mutable_config();
  inline ::yuntongxunwebrtc::rtclog::RtxConfig* release_config();
  inline void set_allocated_config(::yuntongxunwebrtc::rtclog::RtxConfig* config);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.RtxMap)
 private:
  inline void set_has_payload_type();
  inline void clear_has_payload_type();
  inline void set_has_config();
  inline void clear_has_config();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yuntongxunwebrtc::rtclog::RtxConfig* config_;
  ::yuntongxun_google::protobuf::int32 payload_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static RtxMap* default_instance_;
};
// -------------------------------------------------------------------

class VideoSendConfig : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  VideoSendConfig();
  virtual ~VideoSendConfig();

  VideoSendConfig(const VideoSendConfig& from);

  inline VideoSendConfig& operator=(const VideoSendConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const VideoSendConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const VideoSendConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(VideoSendConfig* other);

  // implements Message ----------------------------------------------

  VideoSendConfig* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const VideoSendConfig& from);
  void MergeFrom(const VideoSendConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ssrcs = 1;
  inline int ssrcs_size() const;
  inline void clear_ssrcs();
  static const int kSsrcsFieldNumber = 1;
  inline ::yuntongxun_google::protobuf::uint32 ssrcs(int index) const;
  inline void set_ssrcs(int index, ::yuntongxun_google::protobuf::uint32 value);
  inline void add_ssrcs(::yuntongxun_google::protobuf::uint32 value);
  inline const ::yuntongxun_google::protobuf::RepeatedField< ::yuntongxun_google::protobuf::uint32 >&
      ssrcs() const;
  inline ::yuntongxun_google::protobuf::RepeatedField< ::yuntongxun_google::protobuf::uint32 >*
      mutable_ssrcs();

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
  inline int header_extensions_size() const;
  inline void clear_header_extensions();
  static const int kHeaderExtensionsFieldNumber = 2;
  inline const ::yuntongxunwebrtc::rtclog::RtpHeaderExtension& header_extensions(int index) const;
  inline ::yuntongxunwebrtc::rtclog::RtpHeaderExtension* mutable_header_extensions(int index);
  inline ::yuntongxunwebrtc::rtclog::RtpHeaderExtension* add_header_extensions();
  inline const ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension >&
      header_extensions() const;
  inline ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension >*
      mutable_header_extensions();

  // repeated uint32 rtx_ssrcs = 3;
  inline int rtx_ssrcs_size() const;
  inline void clear_rtx_ssrcs();
  static const int kRtxSsrcsFieldNumber = 3;
  inline ::yuntongxun_google::protobuf::uint32 rtx_ssrcs(int index) const;
  inline void set_rtx_ssrcs(int index, ::yuntongxun_google::protobuf::uint32 value);
  inline void add_rtx_ssrcs(::yuntongxun_google::protobuf::uint32 value);
  inline const ::yuntongxun_google::protobuf::RepeatedField< ::yuntongxun_google::protobuf::uint32 >&
      rtx_ssrcs() const;
  inline ::yuntongxun_google::protobuf::RepeatedField< ::yuntongxun_google::protobuf::uint32 >*
      mutable_rtx_ssrcs();

  // optional int32 rtx_payload_type = 4;
  inline bool has_rtx_payload_type() const;
  inline void clear_rtx_payload_type();
  static const int kRtxPayloadTypeFieldNumber = 4;
  inline ::yuntongxun_google::protobuf::int32 rtx_payload_type() const;
  inline void set_rtx_payload_type(::yuntongxun_google::protobuf::int32 value);

  // optional .webrtc.rtclog.EncoderConfig encoder = 5;
  inline bool has_encoder() const;
  inline void clear_encoder();
  static const int kEncoderFieldNumber = 5;
  inline const ::yuntongxunwebrtc::rtclog::EncoderConfig& encoder() const;
  inline ::yuntongxunwebrtc::rtclog::EncoderConfig* mutable_encoder();
  inline ::yuntongxunwebrtc::rtclog::EncoderConfig* release_encoder();
  inline void set_allocated_encoder(::yuntongxunwebrtc::rtclog::EncoderConfig* encoder);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.VideoSendConfig)
 private:
  inline void set_has_rtx_payload_type();
  inline void clear_has_rtx_payload_type();
  inline void set_has_encoder();
  inline void clear_has_encoder();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yuntongxun_google::protobuf::RepeatedField< ::yuntongxun_google::protobuf::uint32 > ssrcs_;
  ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension > header_extensions_;
  ::yuntongxun_google::protobuf::RepeatedField< ::yuntongxun_google::protobuf::uint32 > rtx_ssrcs_;
  ::yuntongxunwebrtc::rtclog::EncoderConfig* encoder_;
  ::yuntongxun_google::protobuf::int32 rtx_payload_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static VideoSendConfig* default_instance_;
};
// -------------------------------------------------------------------

class EncoderConfig : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  EncoderConfig();
  virtual ~EncoderConfig();

  EncoderConfig(const EncoderConfig& from);

  inline EncoderConfig& operator=(const EncoderConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const EncoderConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const EncoderConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(EncoderConfig* other);

  // implements Message ----------------------------------------------

  EncoderConfig* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const EncoderConfig& from);
  void MergeFrom(const EncoderConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 payload_type = 2;
  inline bool has_payload_type() const;
  inline void clear_payload_type();
  static const int kPayloadTypeFieldNumber = 2;
  inline ::yuntongxun_google::protobuf::int32 payload_type() const;
  inline void set_payload_type(::yuntongxun_google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.EncoderConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_payload_type();
  inline void clear_has_payload_type();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::yuntongxun_google::protobuf::int32 payload_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static EncoderConfig* default_instance_;
};
// -------------------------------------------------------------------

class AudioReceiveConfig : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  AudioReceiveConfig();
  virtual ~AudioReceiveConfig();

  AudioReceiveConfig(const AudioReceiveConfig& from);

  inline AudioReceiveConfig& operator=(const AudioReceiveConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AudioReceiveConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AudioReceiveConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AudioReceiveConfig* other);

  // implements Message ----------------------------------------------

  AudioReceiveConfig* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const AudioReceiveConfig& from);
  void MergeFrom(const AudioReceiveConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 remote_ssrc = 1;
  inline bool has_remote_ssrc() const;
  inline void clear_remote_ssrc();
  static const int kRemoteSsrcFieldNumber = 1;
  inline ::yuntongxun_google::protobuf::uint32 remote_ssrc() const;
  inline void set_remote_ssrc(::yuntongxun_google::protobuf::uint32 value);

  // optional uint32 local_ssrc = 2;
  inline bool has_local_ssrc() const;
  inline void clear_local_ssrc();
  static const int kLocalSsrcFieldNumber = 2;
  inline ::yuntongxun_google::protobuf::uint32 local_ssrc() const;
  inline void set_local_ssrc(::yuntongxun_google::protobuf::uint32 value);

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 3;
  inline int header_extensions_size() const;
  inline void clear_header_extensions();
  static const int kHeaderExtensionsFieldNumber = 3;
  inline const ::yuntongxunwebrtc::rtclog::RtpHeaderExtension& header_extensions(int index) const;
  inline ::yuntongxunwebrtc::rtclog::RtpHeaderExtension* mutable_header_extensions(int index);
  inline ::yuntongxunwebrtc::rtclog::RtpHeaderExtension* add_header_extensions();
  inline const ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension >&
      header_extensions() const;
  inline ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension >*
      mutable_header_extensions();

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.AudioReceiveConfig)
 private:
  inline void set_has_remote_ssrc();
  inline void clear_has_remote_ssrc();
  inline void set_has_local_ssrc();
  inline void clear_has_local_ssrc();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yuntongxun_google::protobuf::uint32 remote_ssrc_;
  ::yuntongxun_google::protobuf::uint32 local_ssrc_;
  ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension > header_extensions_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static AudioReceiveConfig* default_instance_;
};
// -------------------------------------------------------------------

class AudioSendConfig : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  AudioSendConfig();
  virtual ~AudioSendConfig();

  AudioSendConfig(const AudioSendConfig& from);

  inline AudioSendConfig& operator=(const AudioSendConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AudioSendConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AudioSendConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AudioSendConfig* other);

  // implements Message ----------------------------------------------

  AudioSendConfig* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const AudioSendConfig& from);
  void MergeFrom(const AudioSendConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ssrc = 1;
  inline bool has_ssrc() const;
  inline void clear_ssrc();
  static const int kSsrcFieldNumber = 1;
  inline ::yuntongxun_google::protobuf::uint32 ssrc() const;
  inline void set_ssrc(::yuntongxun_google::protobuf::uint32 value);

  // repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
  inline int header_extensions_size() const;
  inline void clear_header_extensions();
  static const int kHeaderExtensionsFieldNumber = 2;
  inline const ::yuntongxunwebrtc::rtclog::RtpHeaderExtension& header_extensions(int index) const;
  inline ::yuntongxunwebrtc::rtclog::RtpHeaderExtension* mutable_header_extensions(int index);
  inline ::yuntongxunwebrtc::rtclog::RtpHeaderExtension* add_header_extensions();
  inline const ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension >&
      header_extensions() const;
  inline ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension >*
      mutable_header_extensions();

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.AudioSendConfig)
 private:
  inline void set_has_ssrc();
  inline void clear_has_ssrc();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension > header_extensions_;
  ::yuntongxun_google::protobuf::uint32 ssrc_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static AudioSendConfig* default_instance_;
};
// -------------------------------------------------------------------

class AudioNetworkAdaptation : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  AudioNetworkAdaptation();
  virtual ~AudioNetworkAdaptation();

  AudioNetworkAdaptation(const AudioNetworkAdaptation& from);

  inline AudioNetworkAdaptation& operator=(const AudioNetworkAdaptation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const AudioNetworkAdaptation& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AudioNetworkAdaptation* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AudioNetworkAdaptation* other);

  // implements Message ----------------------------------------------

  AudioNetworkAdaptation* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const AudioNetworkAdaptation& from);
  void MergeFrom(const AudioNetworkAdaptation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bitrate_bps = 1;
  inline bool has_bitrate_bps() const;
  inline void clear_bitrate_bps();
  static const int kBitrateBpsFieldNumber = 1;
  inline ::yuntongxun_google::protobuf::int32 bitrate_bps() const;
  inline void set_bitrate_bps(::yuntongxun_google::protobuf::int32 value);

  // optional int32 frame_length_ms = 2;
  inline bool has_frame_length_ms() const;
  inline void clear_frame_length_ms();
  static const int kFrameLengthMsFieldNumber = 2;
  inline ::yuntongxun_google::protobuf::int32 frame_length_ms() const;
  inline void set_frame_length_ms(::yuntongxun_google::protobuf::int32 value);

  // optional float uplink_packet_loss_fraction = 3;
  inline bool has_uplink_packet_loss_fraction() const;
  inline void clear_uplink_packet_loss_fraction();
  static const int kUplinkPacketLossFractionFieldNumber = 3;
  inline float uplink_packet_loss_fraction() const;
  inline void set_uplink_packet_loss_fraction(float value);

  // optional bool enable_fec = 4;
  inline bool has_enable_fec() const;
  inline void clear_enable_fec();
  static const int kEnableFecFieldNumber = 4;
  inline bool enable_fec() const;
  inline void set_enable_fec(bool value);

  // optional bool enable_dtx = 5;
  inline bool has_enable_dtx() const;
  inline void clear_enable_dtx();
  static const int kEnableDtxFieldNumber = 5;
  inline bool enable_dtx() const;
  inline void set_enable_dtx(bool value);

  // optional uint32 num_channels = 6;
  inline bool has_num_channels() const;
  inline void clear_num_channels();
  static const int kNumChannelsFieldNumber = 6;
  inline ::yuntongxun_google::protobuf::uint32 num_channels() const;
  inline void set_num_channels(::yuntongxun_google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.AudioNetworkAdaptation)
 private:
  inline void set_has_bitrate_bps();
  inline void clear_has_bitrate_bps();
  inline void set_has_frame_length_ms();
  inline void clear_has_frame_length_ms();
  inline void set_has_uplink_packet_loss_fraction();
  inline void clear_has_uplink_packet_loss_fraction();
  inline void set_has_enable_fec();
  inline void clear_has_enable_fec();
  inline void set_has_enable_dtx();
  inline void clear_has_enable_dtx();
  inline void set_has_num_channels();
  inline void clear_has_num_channels();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yuntongxun_google::protobuf::int32 bitrate_bps_;
  ::yuntongxun_google::protobuf::int32 frame_length_ms_;
  float uplink_packet_loss_fraction_;
  bool enable_fec_;
  bool enable_dtx_;
  ::yuntongxun_google::protobuf::uint32 num_channels_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static AudioNetworkAdaptation* default_instance_;
};
// -------------------------------------------------------------------

class BweProbeCluster : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  BweProbeCluster();
  virtual ~BweProbeCluster();

  BweProbeCluster(const BweProbeCluster& from);

  inline BweProbeCluster& operator=(const BweProbeCluster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const BweProbeCluster& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BweProbeCluster* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BweProbeCluster* other);

  // implements Message ----------------------------------------------

  BweProbeCluster* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const BweProbeCluster& from);
  void MergeFrom(const BweProbeCluster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::yuntongxun_google::protobuf::uint32 id() const;
  inline void set_id(::yuntongxun_google::protobuf::uint32 value);

  // optional uint64 bitrate_bps = 2;
  inline bool has_bitrate_bps() const;
  inline void clear_bitrate_bps();
  static const int kBitrateBpsFieldNumber = 2;
  inline ::yuntongxun_google::protobuf::uint64 bitrate_bps() const;
  inline void set_bitrate_bps(::yuntongxun_google::protobuf::uint64 value);

  // optional uint32 min_packets = 3;
  inline bool has_min_packets() const;
  inline void clear_min_packets();
  static const int kMinPacketsFieldNumber = 3;
  inline ::yuntongxun_google::protobuf::uint32 min_packets() const;
  inline void set_min_packets(::yuntongxun_google::protobuf::uint32 value);

  // optional uint32 min_bytes = 4;
  inline bool has_min_bytes() const;
  inline void clear_min_bytes();
  static const int kMinBytesFieldNumber = 4;
  inline ::yuntongxun_google::protobuf::uint32 min_bytes() const;
  inline void set_min_bytes(::yuntongxun_google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.BweProbeCluster)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_bitrate_bps();
  inline void clear_has_bitrate_bps();
  inline void set_has_min_packets();
  inline void clear_has_min_packets();
  inline void set_has_min_bytes();
  inline void clear_has_min_bytes();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yuntongxun_google::protobuf::uint64 bitrate_bps_;
  ::yuntongxun_google::protobuf::uint32 id_;
  ::yuntongxun_google::protobuf::uint32 min_packets_;
  ::yuntongxun_google::protobuf::uint32 min_bytes_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static BweProbeCluster* default_instance_;
};
// -------------------------------------------------------------------

class BweProbeResult : public ::yuntongxun_google::protobuf::MessageLite {
 public:
  BweProbeResult();
  virtual ~BweProbeResult();

  BweProbeResult(const BweProbeResult& from);

  inline BweProbeResult& operator=(const BweProbeResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const BweProbeResult& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BweProbeResult* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BweProbeResult* other);

  // implements Message ----------------------------------------------

  BweProbeResult* New() const;
  void CheckTypeAndMergeFrom(const ::yuntongxun_google::protobuf::MessageLite& from);
  void CopyFrom(const BweProbeResult& from);
  void MergeFrom(const BweProbeResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::yuntongxun_google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::yuntongxun_google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef BweProbeResult_ResultType ResultType;
  static const ResultType SUCCESS = BweProbeResult_ResultType_SUCCESS;
  static const ResultType INVALID_SEND_RECEIVE_INTERVAL = BweProbeResult_ResultType_INVALID_SEND_RECEIVE_INTERVAL;
  static const ResultType INVALID_SEND_RECEIVE_RATIO = BweProbeResult_ResultType_INVALID_SEND_RECEIVE_RATIO;
  static const ResultType TIMEOUT = BweProbeResult_ResultType_TIMEOUT;
  static inline bool ResultType_IsValid(int value) {
    return BweProbeResult_ResultType_IsValid(value);
  }
  static const ResultType ResultType_MIN =
    BweProbeResult_ResultType_ResultType_MIN;
  static const ResultType ResultType_MAX =
    BweProbeResult_ResultType_ResultType_MAX;
  static const int ResultType_ARRAYSIZE =
    BweProbeResult_ResultType_ResultType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::yuntongxun_google::protobuf::uint32 id() const;
  inline void set_id(::yuntongxun_google::protobuf::uint32 value);

  // optional .webrtc.rtclog.BweProbeResult.ResultType result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::yuntongxunwebrtc::rtclog::BweProbeResult_ResultType result() const;
  inline void set_result(::yuntongxunwebrtc::rtclog::BweProbeResult_ResultType value);

  // optional uint64 bitrate_bps = 3;
  inline bool has_bitrate_bps() const;
  inline void clear_bitrate_bps();
  static const int kBitrateBpsFieldNumber = 3;
  inline ::yuntongxun_google::protobuf::uint64 bitrate_bps() const;
  inline void set_bitrate_bps(::yuntongxun_google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:webrtc.rtclog.BweProbeResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_bitrate_bps();
  inline void clear_has_bitrate_bps();

  ::std::string _unknown_fields_;

  ::yuntongxun_google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::yuntongxun_google::protobuf::uint32 id_;
  int result_;
  ::yuntongxun_google::protobuf::uint64 bitrate_bps_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_rtc_5fevent_5flog_2eproto();
  #endif
  friend void protobuf_AssignDesc_rtc_5fevent_5flog_2eproto();
  friend void protobuf_ShutdownFile_rtc_5fevent_5flog_2eproto();

  void InitAsDefaultInstance();
  static BweProbeResult* default_instance_;
};
// ===================================================================


// ===================================================================

// EventStream

// repeated .webrtc.rtclog.Event stream = 1;
inline int EventStream::stream_size() const {
  return stream_.size();
}
inline void EventStream::clear_stream() {
  stream_.Clear();
}
inline const ::yuntongxunwebrtc::rtclog::Event& EventStream::stream(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.EventStream.stream)
  return stream_.Get(index);
}
inline ::yuntongxunwebrtc::rtclog::Event* EventStream::mutable_stream(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.EventStream.stream)
  return stream_.Mutable(index);
}
inline ::yuntongxunwebrtc::rtclog::Event* EventStream::add_stream() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog.EventStream.stream)
  return stream_.Add();
}
inline const ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::Event >&
EventStream::stream() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.EventStream.stream)
  return stream_;
}
inline ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::Event >*
EventStream::mutable_stream() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.EventStream.stream)
  return &stream_;
}

// -------------------------------------------------------------------

// Event

// optional int64 timestamp_us = 1;
inline bool Event::has_timestamp_us() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_timestamp_us() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_timestamp_us() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_timestamp_us() {
  timestamp_us_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp_us();
}
inline ::yuntongxun_google::protobuf::int64 Event::timestamp_us() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.timestamp_us)
  return timestamp_us_;
}
inline void Event::set_timestamp_us(::yuntongxun_google::protobuf::int64 value) {
  set_has_timestamp_us();
  timestamp_us_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.Event.timestamp_us)
}

// optional .webrtc.rtclog.Event.EventType type = 2;
inline bool Event::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::yuntongxunwebrtc::rtclog::Event_EventType Event::type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.type)
  return static_cast< ::yuntongxunwebrtc::rtclog::Event_EventType >(type_);
}
inline void Event::set_type(::yuntongxunwebrtc::rtclog::Event_EventType value) {
  assert(::yuntongxunwebrtc::rtclog::Event_EventType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.Event.type)
}

// optional .webrtc.rtclog.RtpPacket rtp_packet = 3;
inline bool Event::has_rtp_packet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_rtp_packet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_rtp_packet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_rtp_packet() {
  if (rtp_packet_ != NULL) rtp_packet_->::yuntongxunwebrtc::rtclog::RtpPacket::Clear();
  clear_has_rtp_packet();
}
inline const ::yuntongxunwebrtc::rtclog::RtpPacket& Event::rtp_packet() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.rtp_packet)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rtp_packet_ != NULL ? *rtp_packet_ : *default_instance().rtp_packet_;
#else
  return rtp_packet_ != NULL ? *rtp_packet_ : *default_instance_->rtp_packet_;
#endif
}
inline ::yuntongxunwebrtc::rtclog::RtpPacket* Event::mutable_rtp_packet() {
  set_has_rtp_packet();
  if (rtp_packet_ == NULL) rtp_packet_ = new ::yuntongxunwebrtc::rtclog::RtpPacket;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.rtp_packet)
  return rtp_packet_;
}
inline ::yuntongxunwebrtc::rtclog::RtpPacket* Event::release_rtp_packet() {
  clear_has_rtp_packet();
  ::yuntongxunwebrtc::rtclog::RtpPacket* temp = rtp_packet_;
  rtp_packet_ = NULL;
  return temp;
}
inline void Event::set_allocated_rtp_packet(::yuntongxunwebrtc::rtclog::RtpPacket* rtp_packet) {
  delete rtp_packet_;
  rtp_packet_ = rtp_packet;
  if (rtp_packet) {
    set_has_rtp_packet();
  } else {
    clear_has_rtp_packet();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.rtp_packet)
}

// optional .webrtc.rtclog.RtcpPacket rtcp_packet = 4;
inline bool Event::has_rtcp_packet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event::set_has_rtcp_packet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event::clear_has_rtcp_packet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event::clear_rtcp_packet() {
  if (rtcp_packet_ != NULL) rtcp_packet_->::yuntongxunwebrtc::rtclog::RtcpPacket::Clear();
  clear_has_rtcp_packet();
}
inline const ::yuntongxunwebrtc::rtclog::RtcpPacket& Event::rtcp_packet() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.rtcp_packet)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rtcp_packet_ != NULL ? *rtcp_packet_ : *default_instance().rtcp_packet_;
#else
  return rtcp_packet_ != NULL ? *rtcp_packet_ : *default_instance_->rtcp_packet_;
#endif
}
inline ::yuntongxunwebrtc::rtclog::RtcpPacket* Event::mutable_rtcp_packet() {
  set_has_rtcp_packet();
  if (rtcp_packet_ == NULL) rtcp_packet_ = new ::yuntongxunwebrtc::rtclog::RtcpPacket;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.rtcp_packet)
  return rtcp_packet_;
}
inline ::yuntongxunwebrtc::rtclog::RtcpPacket* Event::release_rtcp_packet() {
  clear_has_rtcp_packet();
  ::yuntongxunwebrtc::rtclog::RtcpPacket* temp = rtcp_packet_;
  rtcp_packet_ = NULL;
  return temp;
}
inline void Event::set_allocated_rtcp_packet(::yuntongxunwebrtc::rtclog::RtcpPacket* rtcp_packet) {
  delete rtcp_packet_;
  rtcp_packet_ = rtcp_packet;
  if (rtcp_packet) {
    set_has_rtcp_packet();
  } else {
    clear_has_rtcp_packet();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.rtcp_packet)
}

// optional .webrtc.rtclog.AudioPlayoutEvent audio_playout_event = 5;
inline bool Event::has_audio_playout_event() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event::set_has_audio_playout_event() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event::clear_has_audio_playout_event() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event::clear_audio_playout_event() {
  if (audio_playout_event_ != NULL) audio_playout_event_->::yuntongxunwebrtc::rtclog::AudioPlayoutEvent::Clear();
  clear_has_audio_playout_event();
}
inline const ::yuntongxunwebrtc::rtclog::AudioPlayoutEvent& Event::audio_playout_event() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.audio_playout_event)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return audio_playout_event_ != NULL ? *audio_playout_event_ : *default_instance().audio_playout_event_;
#else
  return audio_playout_event_ != NULL ? *audio_playout_event_ : *default_instance_->audio_playout_event_;
#endif
}
inline ::yuntongxunwebrtc::rtclog::AudioPlayoutEvent* Event::mutable_audio_playout_event() {
  set_has_audio_playout_event();
  if (audio_playout_event_ == NULL) audio_playout_event_ = new ::yuntongxunwebrtc::rtclog::AudioPlayoutEvent;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.audio_playout_event)
  return audio_playout_event_;
}
inline ::yuntongxunwebrtc::rtclog::AudioPlayoutEvent* Event::release_audio_playout_event() {
  clear_has_audio_playout_event();
  ::yuntongxunwebrtc::rtclog::AudioPlayoutEvent* temp = audio_playout_event_;
  audio_playout_event_ = NULL;
  return temp;
}
inline void Event::set_allocated_audio_playout_event(::yuntongxunwebrtc::rtclog::AudioPlayoutEvent* audio_playout_event) {
  delete audio_playout_event_;
  audio_playout_event_ = audio_playout_event;
  if (audio_playout_event) {
    set_has_audio_playout_event();
  } else {
    clear_has_audio_playout_event();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.audio_playout_event)
}

// optional .webrtc.rtclog.LossBasedBweUpdate loss_based_bwe_update = 6;
inline bool Event::has_loss_based_bwe_update() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Event::set_has_loss_based_bwe_update() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Event::clear_has_loss_based_bwe_update() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Event::clear_loss_based_bwe_update() {
  if (loss_based_bwe_update_ != NULL) loss_based_bwe_update_->::yuntongxunwebrtc::rtclog::LossBasedBweUpdate::Clear();
  clear_has_loss_based_bwe_update();
}
inline const ::yuntongxunwebrtc::rtclog::LossBasedBweUpdate& Event::loss_based_bwe_update() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.loss_based_bwe_update)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return loss_based_bwe_update_ != NULL ? *loss_based_bwe_update_ : *default_instance().loss_based_bwe_update_;
#else
  return loss_based_bwe_update_ != NULL ? *loss_based_bwe_update_ : *default_instance_->loss_based_bwe_update_;
#endif
}
inline ::yuntongxunwebrtc::rtclog::LossBasedBweUpdate* Event::mutable_loss_based_bwe_update() {
  set_has_loss_based_bwe_update();
  if (loss_based_bwe_update_ == NULL) loss_based_bwe_update_ = new ::yuntongxunwebrtc::rtclog::LossBasedBweUpdate;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.loss_based_bwe_update)
  return loss_based_bwe_update_;
}
inline ::yuntongxunwebrtc::rtclog::LossBasedBweUpdate* Event::release_loss_based_bwe_update() {
  clear_has_loss_based_bwe_update();
  ::yuntongxunwebrtc::rtclog::LossBasedBweUpdate* temp = loss_based_bwe_update_;
  loss_based_bwe_update_ = NULL;
  return temp;
}
inline void Event::set_allocated_loss_based_bwe_update(::yuntongxunwebrtc::rtclog::LossBasedBweUpdate* loss_based_bwe_update) {
  delete loss_based_bwe_update_;
  loss_based_bwe_update_ = loss_based_bwe_update;
  if (loss_based_bwe_update) {
    set_has_loss_based_bwe_update();
  } else {
    clear_has_loss_based_bwe_update();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.loss_based_bwe_update)
}

// optional .webrtc.rtclog.DelayBasedBweUpdate delay_based_bwe_update = 7;
inline bool Event::has_delay_based_bwe_update() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Event::set_has_delay_based_bwe_update() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Event::clear_has_delay_based_bwe_update() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Event::clear_delay_based_bwe_update() {
  if (delay_based_bwe_update_ != NULL) delay_based_bwe_update_->::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate::Clear();
  clear_has_delay_based_bwe_update();
}
inline const ::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate& Event::delay_based_bwe_update() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.delay_based_bwe_update)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return delay_based_bwe_update_ != NULL ? *delay_based_bwe_update_ : *default_instance().delay_based_bwe_update_;
#else
  return delay_based_bwe_update_ != NULL ? *delay_based_bwe_update_ : *default_instance_->delay_based_bwe_update_;
#endif
}
inline ::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate* Event::mutable_delay_based_bwe_update() {
  set_has_delay_based_bwe_update();
  if (delay_based_bwe_update_ == NULL) delay_based_bwe_update_ = new ::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.delay_based_bwe_update)
  return delay_based_bwe_update_;
}
inline ::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate* Event::release_delay_based_bwe_update() {
  clear_has_delay_based_bwe_update();
  ::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate* temp = delay_based_bwe_update_;
  delay_based_bwe_update_ = NULL;
  return temp;
}
inline void Event::set_allocated_delay_based_bwe_update(::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate* delay_based_bwe_update) {
  delete delay_based_bwe_update_;
  delay_based_bwe_update_ = delay_based_bwe_update;
  if (delay_based_bwe_update) {
    set_has_delay_based_bwe_update();
  } else {
    clear_has_delay_based_bwe_update();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.delay_based_bwe_update)
}

// optional .webrtc.rtclog.VideoReceiveConfig video_receiver_config = 8;
inline bool Event::has_video_receiver_config() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Event::set_has_video_receiver_config() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Event::clear_has_video_receiver_config() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Event::clear_video_receiver_config() {
  if (video_receiver_config_ != NULL) video_receiver_config_->::yuntongxunwebrtc::rtclog::VideoReceiveConfig::Clear();
  clear_has_video_receiver_config();
}
inline const ::yuntongxunwebrtc::rtclog::VideoReceiveConfig& Event::video_receiver_config() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.video_receiver_config)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return video_receiver_config_ != NULL ? *video_receiver_config_ : *default_instance().video_receiver_config_;
#else
  return video_receiver_config_ != NULL ? *video_receiver_config_ : *default_instance_->video_receiver_config_;
#endif
}
inline ::yuntongxunwebrtc::rtclog::VideoReceiveConfig* Event::mutable_video_receiver_config() {
  set_has_video_receiver_config();
  if (video_receiver_config_ == NULL) video_receiver_config_ = new ::yuntongxunwebrtc::rtclog::VideoReceiveConfig;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.video_receiver_config)
  return video_receiver_config_;
}
inline ::yuntongxunwebrtc::rtclog::VideoReceiveConfig* Event::release_video_receiver_config() {
  clear_has_video_receiver_config();
  ::yuntongxunwebrtc::rtclog::VideoReceiveConfig* temp = video_receiver_config_;
  video_receiver_config_ = NULL;
  return temp;
}
inline void Event::set_allocated_video_receiver_config(::yuntongxunwebrtc::rtclog::VideoReceiveConfig* video_receiver_config) {
  delete video_receiver_config_;
  video_receiver_config_ = video_receiver_config;
  if (video_receiver_config) {
    set_has_video_receiver_config();
  } else {
    clear_has_video_receiver_config();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.video_receiver_config)
}

// optional .webrtc.rtclog.VideoSendConfig video_sender_config = 9;
inline bool Event::has_video_sender_config() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Event::set_has_video_sender_config() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Event::clear_has_video_sender_config() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Event::clear_video_sender_config() {
  if (video_sender_config_ != NULL) video_sender_config_->::yuntongxunwebrtc::rtclog::VideoSendConfig::Clear();
  clear_has_video_sender_config();
}
inline const ::yuntongxunwebrtc::rtclog::VideoSendConfig& Event::video_sender_config() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.video_sender_config)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return video_sender_config_ != NULL ? *video_sender_config_ : *default_instance().video_sender_config_;
#else
  return video_sender_config_ != NULL ? *video_sender_config_ : *default_instance_->video_sender_config_;
#endif
}
inline ::yuntongxunwebrtc::rtclog::VideoSendConfig* Event::mutable_video_sender_config() {
  set_has_video_sender_config();
  if (video_sender_config_ == NULL) video_sender_config_ = new ::yuntongxunwebrtc::rtclog::VideoSendConfig;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.video_sender_config)
  return video_sender_config_;
}
inline ::yuntongxunwebrtc::rtclog::VideoSendConfig* Event::release_video_sender_config() {
  clear_has_video_sender_config();
  ::yuntongxunwebrtc::rtclog::VideoSendConfig* temp = video_sender_config_;
  video_sender_config_ = NULL;
  return temp;
}
inline void Event::set_allocated_video_sender_config(::yuntongxunwebrtc::rtclog::VideoSendConfig* video_sender_config) {
  delete video_sender_config_;
  video_sender_config_ = video_sender_config;
  if (video_sender_config) {
    set_has_video_sender_config();
  } else {
    clear_has_video_sender_config();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.video_sender_config)
}

// optional .webrtc.rtclog.AudioReceiveConfig audio_receiver_config = 10;
inline bool Event::has_audio_receiver_config() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Event::set_has_audio_receiver_config() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Event::clear_has_audio_receiver_config() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Event::clear_audio_receiver_config() {
  if (audio_receiver_config_ != NULL) audio_receiver_config_->::yuntongxunwebrtc::rtclog::AudioReceiveConfig::Clear();
  clear_has_audio_receiver_config();
}
inline const ::yuntongxunwebrtc::rtclog::AudioReceiveConfig& Event::audio_receiver_config() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.audio_receiver_config)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return audio_receiver_config_ != NULL ? *audio_receiver_config_ : *default_instance().audio_receiver_config_;
#else
  return audio_receiver_config_ != NULL ? *audio_receiver_config_ : *default_instance_->audio_receiver_config_;
#endif
}
inline ::yuntongxunwebrtc::rtclog::AudioReceiveConfig* Event::mutable_audio_receiver_config() {
  set_has_audio_receiver_config();
  if (audio_receiver_config_ == NULL) audio_receiver_config_ = new ::yuntongxunwebrtc::rtclog::AudioReceiveConfig;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.audio_receiver_config)
  return audio_receiver_config_;
}
inline ::yuntongxunwebrtc::rtclog::AudioReceiveConfig* Event::release_audio_receiver_config() {
  clear_has_audio_receiver_config();
  ::yuntongxunwebrtc::rtclog::AudioReceiveConfig* temp = audio_receiver_config_;
  audio_receiver_config_ = NULL;
  return temp;
}
inline void Event::set_allocated_audio_receiver_config(::yuntongxunwebrtc::rtclog::AudioReceiveConfig* audio_receiver_config) {
  delete audio_receiver_config_;
  audio_receiver_config_ = audio_receiver_config;
  if (audio_receiver_config) {
    set_has_audio_receiver_config();
  } else {
    clear_has_audio_receiver_config();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.audio_receiver_config)
}

// optional .webrtc.rtclog.AudioSendConfig audio_sender_config = 11;
inline bool Event::has_audio_sender_config() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Event::set_has_audio_sender_config() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Event::clear_has_audio_sender_config() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Event::clear_audio_sender_config() {
  if (audio_sender_config_ != NULL) audio_sender_config_->::yuntongxunwebrtc::rtclog::AudioSendConfig::Clear();
  clear_has_audio_sender_config();
}
inline const ::yuntongxunwebrtc::rtclog::AudioSendConfig& Event::audio_sender_config() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.audio_sender_config)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return audio_sender_config_ != NULL ? *audio_sender_config_ : *default_instance().audio_sender_config_;
#else
  return audio_sender_config_ != NULL ? *audio_sender_config_ : *default_instance_->audio_sender_config_;
#endif
}
inline ::yuntongxunwebrtc::rtclog::AudioSendConfig* Event::mutable_audio_sender_config() {
  set_has_audio_sender_config();
  if (audio_sender_config_ == NULL) audio_sender_config_ = new ::yuntongxunwebrtc::rtclog::AudioSendConfig;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.audio_sender_config)
  return audio_sender_config_;
}
inline ::yuntongxunwebrtc::rtclog::AudioSendConfig* Event::release_audio_sender_config() {
  clear_has_audio_sender_config();
  ::yuntongxunwebrtc::rtclog::AudioSendConfig* temp = audio_sender_config_;
  audio_sender_config_ = NULL;
  return temp;
}
inline void Event::set_allocated_audio_sender_config(::yuntongxunwebrtc::rtclog::AudioSendConfig* audio_sender_config) {
  delete audio_sender_config_;
  audio_sender_config_ = audio_sender_config;
  if (audio_sender_config) {
    set_has_audio_sender_config();
  } else {
    clear_has_audio_sender_config();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.audio_sender_config)
}

// optional .webrtc.rtclog.AudioNetworkAdaptation audio_network_adaptation = 16;
inline bool Event::has_audio_network_adaptation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Event::set_has_audio_network_adaptation() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Event::clear_has_audio_network_adaptation() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Event::clear_audio_network_adaptation() {
  if (audio_network_adaptation_ != NULL) audio_network_adaptation_->::yuntongxunwebrtc::rtclog::AudioNetworkAdaptation::Clear();
  clear_has_audio_network_adaptation();
}
inline const ::yuntongxunwebrtc::rtclog::AudioNetworkAdaptation& Event::audio_network_adaptation() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.audio_network_adaptation)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return audio_network_adaptation_ != NULL ? *audio_network_adaptation_ : *default_instance().audio_network_adaptation_;
#else
  return audio_network_adaptation_ != NULL ? *audio_network_adaptation_ : *default_instance_->audio_network_adaptation_;
#endif
}
inline ::yuntongxunwebrtc::rtclog::AudioNetworkAdaptation* Event::mutable_audio_network_adaptation() {
  set_has_audio_network_adaptation();
  if (audio_network_adaptation_ == NULL) audio_network_adaptation_ = new ::yuntongxunwebrtc::rtclog::AudioNetworkAdaptation;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.audio_network_adaptation)
  return audio_network_adaptation_;
}
inline ::yuntongxunwebrtc::rtclog::AudioNetworkAdaptation* Event::release_audio_network_adaptation() {
  clear_has_audio_network_adaptation();
  ::yuntongxunwebrtc::rtclog::AudioNetworkAdaptation* temp = audio_network_adaptation_;
  audio_network_adaptation_ = NULL;
  return temp;
}
inline void Event::set_allocated_audio_network_adaptation(::yuntongxunwebrtc::rtclog::AudioNetworkAdaptation* audio_network_adaptation) {
  delete audio_network_adaptation_;
  audio_network_adaptation_ = audio_network_adaptation;
  if (audio_network_adaptation) {
    set_has_audio_network_adaptation();
  } else {
    clear_has_audio_network_adaptation();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.audio_network_adaptation)
}

// optional .webrtc.rtclog.BweProbeCluster probe_cluster = 17;
inline bool Event::has_probe_cluster() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Event::set_has_probe_cluster() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Event::clear_has_probe_cluster() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Event::clear_probe_cluster() {
  if (probe_cluster_ != NULL) probe_cluster_->::yuntongxunwebrtc::rtclog::BweProbeCluster::Clear();
  clear_has_probe_cluster();
}
inline const ::yuntongxunwebrtc::rtclog::BweProbeCluster& Event::probe_cluster() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.probe_cluster)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return probe_cluster_ != NULL ? *probe_cluster_ : *default_instance().probe_cluster_;
#else
  return probe_cluster_ != NULL ? *probe_cluster_ : *default_instance_->probe_cluster_;
#endif
}
inline ::yuntongxunwebrtc::rtclog::BweProbeCluster* Event::mutable_probe_cluster() {
  set_has_probe_cluster();
  if (probe_cluster_ == NULL) probe_cluster_ = new ::yuntongxunwebrtc::rtclog::BweProbeCluster;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.probe_cluster)
  return probe_cluster_;
}
inline ::yuntongxunwebrtc::rtclog::BweProbeCluster* Event::release_probe_cluster() {
  clear_has_probe_cluster();
  ::yuntongxunwebrtc::rtclog::BweProbeCluster* temp = probe_cluster_;
  probe_cluster_ = NULL;
  return temp;
}
inline void Event::set_allocated_probe_cluster(::yuntongxunwebrtc::rtclog::BweProbeCluster* probe_cluster) {
  delete probe_cluster_;
  probe_cluster_ = probe_cluster;
  if (probe_cluster) {
    set_has_probe_cluster();
  } else {
    clear_has_probe_cluster();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.probe_cluster)
}

// optional .webrtc.rtclog.BweProbeResult probe_result = 18;
inline bool Event::has_probe_result() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Event::set_has_probe_result() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Event::clear_has_probe_result() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Event::clear_probe_result() {
  if (probe_result_ != NULL) probe_result_->::yuntongxunwebrtc::rtclog::BweProbeResult::Clear();
  clear_has_probe_result();
}
inline const ::yuntongxunwebrtc::rtclog::BweProbeResult& Event::probe_result() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.Event.probe_result)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return probe_result_ != NULL ? *probe_result_ : *default_instance().probe_result_;
#else
  return probe_result_ != NULL ? *probe_result_ : *default_instance_->probe_result_;
#endif
}
inline ::yuntongxunwebrtc::rtclog::BweProbeResult* Event::mutable_probe_result() {
  set_has_probe_result();
  if (probe_result_ == NULL) probe_result_ = new ::yuntongxunwebrtc::rtclog::BweProbeResult;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.Event.probe_result)
  return probe_result_;
}
inline ::yuntongxunwebrtc::rtclog::BweProbeResult* Event::release_probe_result() {
  clear_has_probe_result();
  ::yuntongxunwebrtc::rtclog::BweProbeResult* temp = probe_result_;
  probe_result_ = NULL;
  return temp;
}
inline void Event::set_allocated_probe_result(::yuntongxunwebrtc::rtclog::BweProbeResult* probe_result) {
  delete probe_result_;
  probe_result_ = probe_result;
  if (probe_result) {
    set_has_probe_result();
  } else {
    clear_has_probe_result();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.Event.probe_result)
}

// -------------------------------------------------------------------

// RtpPacket

// optional bool incoming = 1;
inline bool RtpPacket::has_incoming() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtpPacket::set_has_incoming() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtpPacket::clear_has_incoming() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtpPacket::clear_incoming() {
  incoming_ = false;
  clear_has_incoming();
}
inline bool RtpPacket::incoming() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpPacket.incoming)
  return incoming_;
}
inline void RtpPacket::set_incoming(bool value) {
  set_has_incoming();
  incoming_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpPacket.incoming)
}

// optional .webrtc.rtclog.MediaType type = 2;
inline bool RtpPacket::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtpPacket::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtpPacket::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtpPacket::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::yuntongxunwebrtc::rtclog::MediaType RtpPacket::type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpPacket.type)
  return static_cast< ::yuntongxunwebrtc::rtclog::MediaType >(type_);
}
inline void RtpPacket::set_type(::yuntongxunwebrtc::rtclog::MediaType value) {
  assert(::yuntongxunwebrtc::rtclog::MediaType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpPacket.type)
}

// optional uint32 packet_length = 3;
inline bool RtpPacket::has_packet_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtpPacket::set_has_packet_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtpPacket::clear_has_packet_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtpPacket::clear_packet_length() {
  packet_length_ = 0u;
  clear_has_packet_length();
}
inline ::yuntongxun_google::protobuf::uint32 RtpPacket::packet_length() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpPacket.packet_length)
  return packet_length_;
}
inline void RtpPacket::set_packet_length(::yuntongxun_google::protobuf::uint32 value) {
  set_has_packet_length();
  packet_length_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpPacket.packet_length)
}

// optional bytes header = 4;
inline bool RtpPacket::has_header() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtpPacket::set_has_header() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtpPacket::clear_has_header() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtpPacket::clear_header() {
  if (header_ != &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    header_->clear();
  }
  clear_has_header();
}
inline const ::std::string& RtpPacket::header() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpPacket.header)
  return *header_;
}
inline void RtpPacket::set_header(const ::std::string& value) {
  set_has_header();
  if (header_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    header_ = new ::std::string;
  }
  header_->assign(value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpPacket.header)
}
inline void RtpPacket::set_header(const char* value) {
  set_has_header();
  if (header_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    header_ = new ::std::string;
  }
  header_->assign(value);
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog.RtpPacket.header)
}
inline void RtpPacket::set_header(const void* value, size_t size) {
  set_has_header();
  if (header_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    header_ = new ::std::string;
  }
  header_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog.RtpPacket.header)
}
inline ::std::string* RtpPacket::mutable_header() {
  set_has_header();
  if (header_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    header_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.RtpPacket.header)
  return header_;
}
inline ::std::string* RtpPacket::release_header() {
  clear_has_header();
  if (header_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = header_;
    header_ = const_cast< ::std::string*>(&::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RtpPacket::set_allocated_header(::std::string* header) {
  if (header_ != &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete header_;
  }
  if (header) {
    set_has_header();
    header_ = header;
  } else {
    clear_has_header();
    header_ = const_cast< ::std::string*>(&::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.RtpPacket.header)
}

// optional uint32 probe_cluster_id = 5;
inline bool RtpPacket::has_probe_cluster_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtpPacket::set_has_probe_cluster_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtpPacket::clear_has_probe_cluster_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtpPacket::clear_probe_cluster_id() {
  probe_cluster_id_ = 0u;
  clear_has_probe_cluster_id();
}
inline ::yuntongxun_google::protobuf::uint32 RtpPacket::probe_cluster_id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpPacket.probe_cluster_id)
  return probe_cluster_id_;
}
inline void RtpPacket::set_probe_cluster_id(::yuntongxun_google::protobuf::uint32 value) {
  set_has_probe_cluster_id();
  probe_cluster_id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpPacket.probe_cluster_id)
}

// -------------------------------------------------------------------

// RtcpPacket

// optional bool incoming = 1;
inline bool RtcpPacket::has_incoming() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtcpPacket::set_has_incoming() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtcpPacket::clear_has_incoming() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtcpPacket::clear_incoming() {
  incoming_ = false;
  clear_has_incoming();
}
inline bool RtcpPacket::incoming() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtcpPacket.incoming)
  return incoming_;
}
inline void RtcpPacket::set_incoming(bool value) {
  set_has_incoming();
  incoming_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtcpPacket.incoming)
}

// optional .webrtc.rtclog.MediaType type = 2;
inline bool RtcpPacket::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtcpPacket::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtcpPacket::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtcpPacket::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::yuntongxunwebrtc::rtclog::MediaType RtcpPacket::type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtcpPacket.type)
  return static_cast< ::yuntongxunwebrtc::rtclog::MediaType >(type_);
}
inline void RtcpPacket::set_type(::yuntongxunwebrtc::rtclog::MediaType value) {
  assert(::yuntongxunwebrtc::rtclog::MediaType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtcpPacket.type)
}

// optional bytes packet_data = 3;
inline bool RtcpPacket::has_packet_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtcpPacket::set_has_packet_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtcpPacket::clear_has_packet_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtcpPacket::clear_packet_data() {
  if (packet_data_ != &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packet_data_->clear();
  }
  clear_has_packet_data();
}
inline const ::std::string& RtcpPacket::packet_data() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtcpPacket.packet_data)
  return *packet_data_;
}
inline void RtcpPacket::set_packet_data(const ::std::string& value) {
  set_has_packet_data();
  if (packet_data_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packet_data_ = new ::std::string;
  }
  packet_data_->assign(value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtcpPacket.packet_data)
}
inline void RtcpPacket::set_packet_data(const char* value) {
  set_has_packet_data();
  if (packet_data_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packet_data_ = new ::std::string;
  }
  packet_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog.RtcpPacket.packet_data)
}
inline void RtcpPacket::set_packet_data(const void* value, size_t size) {
  set_has_packet_data();
  if (packet_data_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packet_data_ = new ::std::string;
  }
  packet_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog.RtcpPacket.packet_data)
}
inline ::std::string* RtcpPacket::mutable_packet_data() {
  set_has_packet_data();
  if (packet_data_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    packet_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.RtcpPacket.packet_data)
  return packet_data_;
}
inline ::std::string* RtcpPacket::release_packet_data() {
  clear_has_packet_data();
  if (packet_data_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = packet_data_;
    packet_data_ = const_cast< ::std::string*>(&::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RtcpPacket::set_allocated_packet_data(::std::string* packet_data) {
  if (packet_data_ != &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete packet_data_;
  }
  if (packet_data) {
    set_has_packet_data();
    packet_data_ = packet_data;
  } else {
    clear_has_packet_data();
    packet_data_ = const_cast< ::std::string*>(&::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.RtcpPacket.packet_data)
}

// -------------------------------------------------------------------

// AudioPlayoutEvent

// optional uint32 local_ssrc = 2;
inline bool AudioPlayoutEvent::has_local_ssrc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioPlayoutEvent::set_has_local_ssrc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioPlayoutEvent::clear_has_local_ssrc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioPlayoutEvent::clear_local_ssrc() {
  local_ssrc_ = 0u;
  clear_has_local_ssrc();
}
inline ::yuntongxun_google::protobuf::uint32 AudioPlayoutEvent::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioPlayoutEvent.local_ssrc)
  return local_ssrc_;
}
inline void AudioPlayoutEvent::set_local_ssrc(::yuntongxun_google::protobuf::uint32 value) {
  set_has_local_ssrc();
  local_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioPlayoutEvent.local_ssrc)
}

// -------------------------------------------------------------------

// LossBasedBweUpdate

// optional int32 bitrate_bps = 1;
inline bool LossBasedBweUpdate::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LossBasedBweUpdate::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LossBasedBweUpdate::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LossBasedBweUpdate::clear_bitrate_bps() {
  bitrate_bps_ = 0;
  clear_has_bitrate_bps();
}
inline ::yuntongxun_google::protobuf::int32 LossBasedBweUpdate::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.LossBasedBweUpdate.bitrate_bps)
  return bitrate_bps_;
}
inline void LossBasedBweUpdate::set_bitrate_bps(::yuntongxun_google::protobuf::int32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.LossBasedBweUpdate.bitrate_bps)
}

// optional uint32 fraction_loss = 2;
inline bool LossBasedBweUpdate::has_fraction_loss() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LossBasedBweUpdate::set_has_fraction_loss() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LossBasedBweUpdate::clear_has_fraction_loss() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LossBasedBweUpdate::clear_fraction_loss() {
  fraction_loss_ = 0u;
  clear_has_fraction_loss();
}
inline ::yuntongxun_google::protobuf::uint32 LossBasedBweUpdate::fraction_loss() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.LossBasedBweUpdate.fraction_loss)
  return fraction_loss_;
}
inline void LossBasedBweUpdate::set_fraction_loss(::yuntongxun_google::protobuf::uint32 value) {
  set_has_fraction_loss();
  fraction_loss_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.LossBasedBweUpdate.fraction_loss)
}

// optional int32 total_packets = 3;
inline bool LossBasedBweUpdate::has_total_packets() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LossBasedBweUpdate::set_has_total_packets() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LossBasedBweUpdate::clear_has_total_packets() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LossBasedBweUpdate::clear_total_packets() {
  total_packets_ = 0;
  clear_has_total_packets();
}
inline ::yuntongxun_google::protobuf::int32 LossBasedBweUpdate::total_packets() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.LossBasedBweUpdate.total_packets)
  return total_packets_;
}
inline void LossBasedBweUpdate::set_total_packets(::yuntongxun_google::protobuf::int32 value) {
  set_has_total_packets();
  total_packets_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.LossBasedBweUpdate.total_packets)
}

// -------------------------------------------------------------------

// DelayBasedBweUpdate

// optional int32 bitrate_bps = 1;
inline bool DelayBasedBweUpdate::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelayBasedBweUpdate::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelayBasedBweUpdate::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelayBasedBweUpdate::clear_bitrate_bps() {
  bitrate_bps_ = 0;
  clear_has_bitrate_bps();
}
inline ::yuntongxun_google::protobuf::int32 DelayBasedBweUpdate::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.DelayBasedBweUpdate.bitrate_bps)
  return bitrate_bps_;
}
inline void DelayBasedBweUpdate::set_bitrate_bps(::yuntongxun_google::protobuf::int32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.DelayBasedBweUpdate.bitrate_bps)
}

// optional .webrtc.rtclog.DelayBasedBweUpdate.DetectorState detector_state = 2;
inline bool DelayBasedBweUpdate::has_detector_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelayBasedBweUpdate::set_has_detector_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelayBasedBweUpdate::clear_has_detector_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelayBasedBweUpdate::clear_detector_state() {
  detector_state_ = 0;
  clear_has_detector_state();
}
inline ::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate_DetectorState DelayBasedBweUpdate::detector_state() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.DelayBasedBweUpdate.detector_state)
  return static_cast< ::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate_DetectorState >(detector_state_);
}
inline void DelayBasedBweUpdate::set_detector_state(::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate_DetectorState value) {
  assert(::yuntongxunwebrtc::rtclog::DelayBasedBweUpdate_DetectorState_IsValid(value));
  set_has_detector_state();
  detector_state_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.DelayBasedBweUpdate.detector_state)
}

// -------------------------------------------------------------------

// VideoReceiveConfig

// optional uint32 remote_ssrc = 1;
inline bool VideoReceiveConfig::has_remote_ssrc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoReceiveConfig::set_has_remote_ssrc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoReceiveConfig::clear_has_remote_ssrc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoReceiveConfig::clear_remote_ssrc() {
  remote_ssrc_ = 0u;
  clear_has_remote_ssrc();
}
inline ::yuntongxun_google::protobuf::uint32 VideoReceiveConfig::remote_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.remote_ssrc)
  return remote_ssrc_;
}
inline void VideoReceiveConfig::set_remote_ssrc(::yuntongxun_google::protobuf::uint32 value) {
  set_has_remote_ssrc();
  remote_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoReceiveConfig.remote_ssrc)
}

// optional uint32 local_ssrc = 2;
inline bool VideoReceiveConfig::has_local_ssrc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoReceiveConfig::set_has_local_ssrc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoReceiveConfig::clear_has_local_ssrc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoReceiveConfig::clear_local_ssrc() {
  local_ssrc_ = 0u;
  clear_has_local_ssrc();
}
inline ::yuntongxun_google::protobuf::uint32 VideoReceiveConfig::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.local_ssrc)
  return local_ssrc_;
}
inline void VideoReceiveConfig::set_local_ssrc(::yuntongxun_google::protobuf::uint32 value) {
  set_has_local_ssrc();
  local_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoReceiveConfig.local_ssrc)
}

// optional .webrtc.rtclog.VideoReceiveConfig.RtcpMode rtcp_mode = 3;
inline bool VideoReceiveConfig::has_rtcp_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoReceiveConfig::set_has_rtcp_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoReceiveConfig::clear_has_rtcp_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoReceiveConfig::clear_rtcp_mode() {
  rtcp_mode_ = 1;
  clear_has_rtcp_mode();
}
inline ::yuntongxunwebrtc::rtclog::VideoReceiveConfig_RtcpMode VideoReceiveConfig::rtcp_mode() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.rtcp_mode)
  return static_cast< ::yuntongxunwebrtc::rtclog::VideoReceiveConfig_RtcpMode >(rtcp_mode_);
}
inline void VideoReceiveConfig::set_rtcp_mode(::yuntongxunwebrtc::rtclog::VideoReceiveConfig_RtcpMode value) {
  assert(::yuntongxunwebrtc::rtclog::VideoReceiveConfig_RtcpMode_IsValid(value));
  set_has_rtcp_mode();
  rtcp_mode_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoReceiveConfig.rtcp_mode)
}

// optional bool remb = 4;
inline bool VideoReceiveConfig::has_remb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoReceiveConfig::set_has_remb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoReceiveConfig::clear_has_remb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoReceiveConfig::clear_remb() {
  remb_ = false;
  clear_has_remb();
}
inline bool VideoReceiveConfig::remb() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.remb)
  return remb_;
}
inline void VideoReceiveConfig::set_remb(bool value) {
  set_has_remb();
  remb_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoReceiveConfig.remb)
}

// repeated .webrtc.rtclog.RtxMap rtx_map = 5;
inline int VideoReceiveConfig::rtx_map_size() const {
  return rtx_map_.size();
}
inline void VideoReceiveConfig::clear_rtx_map() {
  rtx_map_.Clear();
}
inline const ::yuntongxunwebrtc::rtclog::RtxMap& VideoReceiveConfig::rtx_map(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.rtx_map)
  return rtx_map_.Get(index);
}
inline ::yuntongxunwebrtc::rtclog::RtxMap* VideoReceiveConfig::mutable_rtx_map(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.VideoReceiveConfig.rtx_map)
  return rtx_map_.Mutable(index);
}
inline ::yuntongxunwebrtc::rtclog::RtxMap* VideoReceiveConfig::add_rtx_map() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoReceiveConfig.rtx_map)
  return rtx_map_.Add();
}
inline const ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtxMap >&
VideoReceiveConfig::rtx_map() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoReceiveConfig.rtx_map)
  return rtx_map_;
}
inline ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtxMap >*
VideoReceiveConfig::mutable_rtx_map() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoReceiveConfig.rtx_map)
  return &rtx_map_;
}

// repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 6;
inline int VideoReceiveConfig::header_extensions_size() const {
  return header_extensions_.size();
}
inline void VideoReceiveConfig::clear_header_extensions() {
  header_extensions_.Clear();
}
inline const ::yuntongxunwebrtc::rtclog::RtpHeaderExtension& VideoReceiveConfig::header_extensions(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.header_extensions)
  return header_extensions_.Get(index);
}
inline ::yuntongxunwebrtc::rtclog::RtpHeaderExtension* VideoReceiveConfig::mutable_header_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.VideoReceiveConfig.header_extensions)
  return header_extensions_.Mutable(index);
}
inline ::yuntongxunwebrtc::rtclog::RtpHeaderExtension* VideoReceiveConfig::add_header_extensions() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoReceiveConfig.header_extensions)
  return header_extensions_.Add();
}
inline const ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension >&
VideoReceiveConfig::header_extensions() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoReceiveConfig.header_extensions)
  return header_extensions_;
}
inline ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension >*
VideoReceiveConfig::mutable_header_extensions() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoReceiveConfig.header_extensions)
  return &header_extensions_;
}

// repeated .webrtc.rtclog.DecoderConfig decoders = 7;
inline int VideoReceiveConfig::decoders_size() const {
  return decoders_.size();
}
inline void VideoReceiveConfig::clear_decoders() {
  decoders_.Clear();
}
inline const ::yuntongxunwebrtc::rtclog::DecoderConfig& VideoReceiveConfig::decoders(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoReceiveConfig.decoders)
  return decoders_.Get(index);
}
inline ::yuntongxunwebrtc::rtclog::DecoderConfig* VideoReceiveConfig::mutable_decoders(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.VideoReceiveConfig.decoders)
  return decoders_.Mutable(index);
}
inline ::yuntongxunwebrtc::rtclog::DecoderConfig* VideoReceiveConfig::add_decoders() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoReceiveConfig.decoders)
  return decoders_.Add();
}
inline const ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::DecoderConfig >&
VideoReceiveConfig::decoders() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoReceiveConfig.decoders)
  return decoders_;
}
inline ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::DecoderConfig >*
VideoReceiveConfig::mutable_decoders() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoReceiveConfig.decoders)
  return &decoders_;
}

// -------------------------------------------------------------------

// DecoderConfig

// optional string name = 1;
inline bool DecoderConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DecoderConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DecoderConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DecoderConfig::clear_name() {
  if (name_ != &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DecoderConfig::name() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.DecoderConfig.name)
  return *name_;
}
inline void DecoderConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog.DecoderConfig.name)
}
inline void DecoderConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog.DecoderConfig.name)
}
inline void DecoderConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog.DecoderConfig.name)
}
inline ::std::string* DecoderConfig::mutable_name() {
  set_has_name();
  if (name_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.DecoderConfig.name)
  return name_;
}
inline ::std::string* DecoderConfig::release_name() {
  clear_has_name();
  if (name_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DecoderConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.DecoderConfig.name)
}

// optional int32 payload_type = 2;
inline bool DecoderConfig::has_payload_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DecoderConfig::set_has_payload_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DecoderConfig::clear_has_payload_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DecoderConfig::clear_payload_type() {
  payload_type_ = 0;
  clear_has_payload_type();
}
inline ::yuntongxun_google::protobuf::int32 DecoderConfig::payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.DecoderConfig.payload_type)
  return payload_type_;
}
inline void DecoderConfig::set_payload_type(::yuntongxun_google::protobuf::int32 value) {
  set_has_payload_type();
  payload_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.DecoderConfig.payload_type)
}

// -------------------------------------------------------------------

// RtpHeaderExtension

// optional string name = 1;
inline bool RtpHeaderExtension::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtpHeaderExtension::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtpHeaderExtension::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtpHeaderExtension::clear_name() {
  if (name_ != &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RtpHeaderExtension::name() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpHeaderExtension.name)
  return *name_;
}
inline void RtpHeaderExtension::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpHeaderExtension.name)
}
inline void RtpHeaderExtension::set_name(const char* value) {
  set_has_name();
  if (name_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog.RtpHeaderExtension.name)
}
inline void RtpHeaderExtension::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog.RtpHeaderExtension.name)
}
inline ::std::string* RtpHeaderExtension::mutable_name() {
  set_has_name();
  if (name_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.RtpHeaderExtension.name)
  return name_;
}
inline ::std::string* RtpHeaderExtension::release_name() {
  clear_has_name();
  if (name_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RtpHeaderExtension::set_allocated_name(::std::string* name) {
  if (name_ != &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.RtpHeaderExtension.name)
}

// optional int32 id = 2;
inline bool RtpHeaderExtension::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtpHeaderExtension::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtpHeaderExtension::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtpHeaderExtension::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::yuntongxun_google::protobuf::int32 RtpHeaderExtension::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtpHeaderExtension.id)
  return id_;
}
inline void RtpHeaderExtension::set_id(::yuntongxun_google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtpHeaderExtension.id)
}

// -------------------------------------------------------------------

// RtxConfig

// optional uint32 rtx_ssrc = 1;
inline bool RtxConfig::has_rtx_ssrc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtxConfig::set_has_rtx_ssrc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtxConfig::clear_has_rtx_ssrc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtxConfig::clear_rtx_ssrc() {
  rtx_ssrc_ = 0u;
  clear_has_rtx_ssrc();
}
inline ::yuntongxun_google::protobuf::uint32 RtxConfig::rtx_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtxConfig.rtx_ssrc)
  return rtx_ssrc_;
}
inline void RtxConfig::set_rtx_ssrc(::yuntongxun_google::protobuf::uint32 value) {
  set_has_rtx_ssrc();
  rtx_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtxConfig.rtx_ssrc)
}

// optional int32 rtx_payload_type = 2;
inline bool RtxConfig::has_rtx_payload_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtxConfig::set_has_rtx_payload_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtxConfig::clear_has_rtx_payload_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtxConfig::clear_rtx_payload_type() {
  rtx_payload_type_ = 0;
  clear_has_rtx_payload_type();
}
inline ::yuntongxun_google::protobuf::int32 RtxConfig::rtx_payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtxConfig.rtx_payload_type)
  return rtx_payload_type_;
}
inline void RtxConfig::set_rtx_payload_type(::yuntongxun_google::protobuf::int32 value) {
  set_has_rtx_payload_type();
  rtx_payload_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtxConfig.rtx_payload_type)
}

// -------------------------------------------------------------------

// RtxMap

// optional int32 payload_type = 1;
inline bool RtxMap::has_payload_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtxMap::set_has_payload_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtxMap::clear_has_payload_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtxMap::clear_payload_type() {
  payload_type_ = 0;
  clear_has_payload_type();
}
inline ::yuntongxun_google::protobuf::int32 RtxMap::payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtxMap.payload_type)
  return payload_type_;
}
inline void RtxMap::set_payload_type(::yuntongxun_google::protobuf::int32 value) {
  set_has_payload_type();
  payload_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.RtxMap.payload_type)
}

// optional .webrtc.rtclog.RtxConfig config = 2;
inline bool RtxMap::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtxMap::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtxMap::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtxMap::clear_config() {
  if (config_ != NULL) config_->::yuntongxunwebrtc::rtclog::RtxConfig::Clear();
  clear_has_config();
}
inline const ::yuntongxunwebrtc::rtclog::RtxConfig& RtxMap::config() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.RtxMap.config)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return config_ != NULL ? *config_ : *default_instance().config_;
#else
  return config_ != NULL ? *config_ : *default_instance_->config_;
#endif
}
inline ::yuntongxunwebrtc::rtclog::RtxConfig* RtxMap::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::yuntongxunwebrtc::rtclog::RtxConfig;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.RtxMap.config)
  return config_;
}
inline ::yuntongxunwebrtc::rtclog::RtxConfig* RtxMap::release_config() {
  clear_has_config();
  ::yuntongxunwebrtc::rtclog::RtxConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline void RtxMap::set_allocated_config(::yuntongxunwebrtc::rtclog::RtxConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.RtxMap.config)
}

// -------------------------------------------------------------------

// VideoSendConfig

// repeated uint32 ssrcs = 1;
inline int VideoSendConfig::ssrcs_size() const {
  return ssrcs_.size();
}
inline void VideoSendConfig::clear_ssrcs() {
  ssrcs_.Clear();
}
inline ::yuntongxun_google::protobuf::uint32 VideoSendConfig::ssrcs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoSendConfig.ssrcs)
  return ssrcs_.Get(index);
}
inline void VideoSendConfig::set_ssrcs(int index, ::yuntongxun_google::protobuf::uint32 value) {
  ssrcs_.Set(index, value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoSendConfig.ssrcs)
}
inline void VideoSendConfig::add_ssrcs(::yuntongxun_google::protobuf::uint32 value) {
  ssrcs_.Add(value);
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoSendConfig.ssrcs)
}
inline const ::yuntongxun_google::protobuf::RepeatedField< ::yuntongxun_google::protobuf::uint32 >&
VideoSendConfig::ssrcs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoSendConfig.ssrcs)
  return ssrcs_;
}
inline ::yuntongxun_google::protobuf::RepeatedField< ::yuntongxun_google::protobuf::uint32 >*
VideoSendConfig::mutable_ssrcs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoSendConfig.ssrcs)
  return &ssrcs_;
}

// repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
inline int VideoSendConfig::header_extensions_size() const {
  return header_extensions_.size();
}
inline void VideoSendConfig::clear_header_extensions() {
  header_extensions_.Clear();
}
inline const ::yuntongxunwebrtc::rtclog::RtpHeaderExtension& VideoSendConfig::header_extensions(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoSendConfig.header_extensions)
  return header_extensions_.Get(index);
}
inline ::yuntongxunwebrtc::rtclog::RtpHeaderExtension* VideoSendConfig::mutable_header_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.VideoSendConfig.header_extensions)
  return header_extensions_.Mutable(index);
}
inline ::yuntongxunwebrtc::rtclog::RtpHeaderExtension* VideoSendConfig::add_header_extensions() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoSendConfig.header_extensions)
  return header_extensions_.Add();
}
inline const ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension >&
VideoSendConfig::header_extensions() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoSendConfig.header_extensions)
  return header_extensions_;
}
inline ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension >*
VideoSendConfig::mutable_header_extensions() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoSendConfig.header_extensions)
  return &header_extensions_;
}

// repeated uint32 rtx_ssrcs = 3;
inline int VideoSendConfig::rtx_ssrcs_size() const {
  return rtx_ssrcs_.size();
}
inline void VideoSendConfig::clear_rtx_ssrcs() {
  rtx_ssrcs_.Clear();
}
inline ::yuntongxun_google::protobuf::uint32 VideoSendConfig::rtx_ssrcs(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoSendConfig.rtx_ssrcs)
  return rtx_ssrcs_.Get(index);
}
inline void VideoSendConfig::set_rtx_ssrcs(int index, ::yuntongxun_google::protobuf::uint32 value) {
  rtx_ssrcs_.Set(index, value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoSendConfig.rtx_ssrcs)
}
inline void VideoSendConfig::add_rtx_ssrcs(::yuntongxun_google::protobuf::uint32 value) {
  rtx_ssrcs_.Add(value);
  // @@protoc_insertion_point(field_add:webrtc.rtclog.VideoSendConfig.rtx_ssrcs)
}
inline const ::yuntongxun_google::protobuf::RepeatedField< ::yuntongxun_google::protobuf::uint32 >&
VideoSendConfig::rtx_ssrcs() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.VideoSendConfig.rtx_ssrcs)
  return rtx_ssrcs_;
}
inline ::yuntongxun_google::protobuf::RepeatedField< ::yuntongxun_google::protobuf::uint32 >*
VideoSendConfig::mutable_rtx_ssrcs() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.VideoSendConfig.rtx_ssrcs)
  return &rtx_ssrcs_;
}

// optional int32 rtx_payload_type = 4;
inline bool VideoSendConfig::has_rtx_payload_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoSendConfig::set_has_rtx_payload_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoSendConfig::clear_has_rtx_payload_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoSendConfig::clear_rtx_payload_type() {
  rtx_payload_type_ = 0;
  clear_has_rtx_payload_type();
}
inline ::yuntongxun_google::protobuf::int32 VideoSendConfig::rtx_payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoSendConfig.rtx_payload_type)
  return rtx_payload_type_;
}
inline void VideoSendConfig::set_rtx_payload_type(::yuntongxun_google::protobuf::int32 value) {
  set_has_rtx_payload_type();
  rtx_payload_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.VideoSendConfig.rtx_payload_type)
}

// optional .webrtc.rtclog.EncoderConfig encoder = 5;
inline bool VideoSendConfig::has_encoder() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoSendConfig::set_has_encoder() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoSendConfig::clear_has_encoder() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoSendConfig::clear_encoder() {
  if (encoder_ != NULL) encoder_->::yuntongxunwebrtc::rtclog::EncoderConfig::Clear();
  clear_has_encoder();
}
inline const ::yuntongxunwebrtc::rtclog::EncoderConfig& VideoSendConfig::encoder() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.VideoSendConfig.encoder)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return encoder_ != NULL ? *encoder_ : *default_instance().encoder_;
#else
  return encoder_ != NULL ? *encoder_ : *default_instance_->encoder_;
#endif
}
inline ::yuntongxunwebrtc::rtclog::EncoderConfig* VideoSendConfig::mutable_encoder() {
  set_has_encoder();
  if (encoder_ == NULL) encoder_ = new ::yuntongxunwebrtc::rtclog::EncoderConfig;
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.VideoSendConfig.encoder)
  return encoder_;
}
inline ::yuntongxunwebrtc::rtclog::EncoderConfig* VideoSendConfig::release_encoder() {
  clear_has_encoder();
  ::yuntongxunwebrtc::rtclog::EncoderConfig* temp = encoder_;
  encoder_ = NULL;
  return temp;
}
inline void VideoSendConfig::set_allocated_encoder(::yuntongxunwebrtc::rtclog::EncoderConfig* encoder) {
  delete encoder_;
  encoder_ = encoder;
  if (encoder) {
    set_has_encoder();
  } else {
    clear_has_encoder();
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.VideoSendConfig.encoder)
}

// -------------------------------------------------------------------

// EncoderConfig

// optional string name = 1;
inline bool EncoderConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncoderConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EncoderConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EncoderConfig::clear_name() {
  if (name_ != &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& EncoderConfig::name() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.EncoderConfig.name)
  return *name_;
}
inline void EncoderConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:webrtc.rtclog.EncoderConfig.name)
}
inline void EncoderConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:webrtc.rtclog.EncoderConfig.name)
}
inline void EncoderConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:webrtc.rtclog.EncoderConfig.name)
}
inline ::std::string* EncoderConfig::mutable_name() {
  set_has_name();
  if (name_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.EncoderConfig.name)
  return name_;
}
inline ::std::string* EncoderConfig::release_name() {
  clear_has_name();
  if (name_ == &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EncoderConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::yuntongxun_google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:webrtc.rtclog.EncoderConfig.name)
}

// optional int32 payload_type = 2;
inline bool EncoderConfig::has_payload_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EncoderConfig::set_has_payload_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EncoderConfig::clear_has_payload_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EncoderConfig::clear_payload_type() {
  payload_type_ = 0;
  clear_has_payload_type();
}
inline ::yuntongxun_google::protobuf::int32 EncoderConfig::payload_type() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.EncoderConfig.payload_type)
  return payload_type_;
}
inline void EncoderConfig::set_payload_type(::yuntongxun_google::protobuf::int32 value) {
  set_has_payload_type();
  payload_type_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.EncoderConfig.payload_type)
}

// -------------------------------------------------------------------

// AudioReceiveConfig

// optional uint32 remote_ssrc = 1;
inline bool AudioReceiveConfig::has_remote_ssrc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioReceiveConfig::set_has_remote_ssrc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioReceiveConfig::clear_has_remote_ssrc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioReceiveConfig::clear_remote_ssrc() {
  remote_ssrc_ = 0u;
  clear_has_remote_ssrc();
}
inline ::yuntongxun_google::protobuf::uint32 AudioReceiveConfig::remote_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioReceiveConfig.remote_ssrc)
  return remote_ssrc_;
}
inline void AudioReceiveConfig::set_remote_ssrc(::yuntongxun_google::protobuf::uint32 value) {
  set_has_remote_ssrc();
  remote_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioReceiveConfig.remote_ssrc)
}

// optional uint32 local_ssrc = 2;
inline bool AudioReceiveConfig::has_local_ssrc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioReceiveConfig::set_has_local_ssrc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioReceiveConfig::clear_has_local_ssrc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioReceiveConfig::clear_local_ssrc() {
  local_ssrc_ = 0u;
  clear_has_local_ssrc();
}
inline ::yuntongxun_google::protobuf::uint32 AudioReceiveConfig::local_ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioReceiveConfig.local_ssrc)
  return local_ssrc_;
}
inline void AudioReceiveConfig::set_local_ssrc(::yuntongxun_google::protobuf::uint32 value) {
  set_has_local_ssrc();
  local_ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioReceiveConfig.local_ssrc)
}

// repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 3;
inline int AudioReceiveConfig::header_extensions_size() const {
  return header_extensions_.size();
}
inline void AudioReceiveConfig::clear_header_extensions() {
  header_extensions_.Clear();
}
inline const ::yuntongxunwebrtc::rtclog::RtpHeaderExtension& AudioReceiveConfig::header_extensions(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioReceiveConfig.header_extensions)
  return header_extensions_.Get(index);
}
inline ::yuntongxunwebrtc::rtclog::RtpHeaderExtension* AudioReceiveConfig::mutable_header_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.AudioReceiveConfig.header_extensions)
  return header_extensions_.Mutable(index);
}
inline ::yuntongxunwebrtc::rtclog::RtpHeaderExtension* AudioReceiveConfig::add_header_extensions() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog.AudioReceiveConfig.header_extensions)
  return header_extensions_.Add();
}
inline const ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension >&
AudioReceiveConfig::header_extensions() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.AudioReceiveConfig.header_extensions)
  return header_extensions_;
}
inline ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension >*
AudioReceiveConfig::mutable_header_extensions() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.AudioReceiveConfig.header_extensions)
  return &header_extensions_;
}

// -------------------------------------------------------------------

// AudioSendConfig

// optional uint32 ssrc = 1;
inline bool AudioSendConfig::has_ssrc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioSendConfig::set_has_ssrc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioSendConfig::clear_has_ssrc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioSendConfig::clear_ssrc() {
  ssrc_ = 0u;
  clear_has_ssrc();
}
inline ::yuntongxun_google::protobuf::uint32 AudioSendConfig::ssrc() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioSendConfig.ssrc)
  return ssrc_;
}
inline void AudioSendConfig::set_ssrc(::yuntongxun_google::protobuf::uint32 value) {
  set_has_ssrc();
  ssrc_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioSendConfig.ssrc)
}

// repeated .webrtc.rtclog.RtpHeaderExtension header_extensions = 2;
inline int AudioSendConfig::header_extensions_size() const {
  return header_extensions_.size();
}
inline void AudioSendConfig::clear_header_extensions() {
  header_extensions_.Clear();
}
inline const ::yuntongxunwebrtc::rtclog::RtpHeaderExtension& AudioSendConfig::header_extensions(int index) const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioSendConfig.header_extensions)
  return header_extensions_.Get(index);
}
inline ::yuntongxunwebrtc::rtclog::RtpHeaderExtension* AudioSendConfig::mutable_header_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:webrtc.rtclog.AudioSendConfig.header_extensions)
  return header_extensions_.Mutable(index);
}
inline ::yuntongxunwebrtc::rtclog::RtpHeaderExtension* AudioSendConfig::add_header_extensions() {
  // @@protoc_insertion_point(field_add:webrtc.rtclog.AudioSendConfig.header_extensions)
  return header_extensions_.Add();
}
inline const ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension >&
AudioSendConfig::header_extensions() const {
  // @@protoc_insertion_point(field_list:webrtc.rtclog.AudioSendConfig.header_extensions)
  return header_extensions_;
}
inline ::yuntongxun_google::protobuf::RepeatedPtrField< ::yuntongxunwebrtc::rtclog::RtpHeaderExtension >*
AudioSendConfig::mutable_header_extensions() {
  // @@protoc_insertion_point(field_mutable_list:webrtc.rtclog.AudioSendConfig.header_extensions)
  return &header_extensions_;
}

// -------------------------------------------------------------------

// AudioNetworkAdaptation

// optional int32 bitrate_bps = 1;
inline bool AudioNetworkAdaptation::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AudioNetworkAdaptation::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AudioNetworkAdaptation::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AudioNetworkAdaptation::clear_bitrate_bps() {
  bitrate_bps_ = 0;
  clear_has_bitrate_bps();
}
inline ::yuntongxun_google::protobuf::int32 AudioNetworkAdaptation::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.bitrate_bps)
  return bitrate_bps_;
}
inline void AudioNetworkAdaptation::set_bitrate_bps(::yuntongxun_google::protobuf::int32 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.bitrate_bps)
}

// optional int32 frame_length_ms = 2;
inline bool AudioNetworkAdaptation::has_frame_length_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AudioNetworkAdaptation::set_has_frame_length_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AudioNetworkAdaptation::clear_has_frame_length_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AudioNetworkAdaptation::clear_frame_length_ms() {
  frame_length_ms_ = 0;
  clear_has_frame_length_ms();
}
inline ::yuntongxun_google::protobuf::int32 AudioNetworkAdaptation::frame_length_ms() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.frame_length_ms)
  return frame_length_ms_;
}
inline void AudioNetworkAdaptation::set_frame_length_ms(::yuntongxun_google::protobuf::int32 value) {
  set_has_frame_length_ms();
  frame_length_ms_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.frame_length_ms)
}

// optional float uplink_packet_loss_fraction = 3;
inline bool AudioNetworkAdaptation::has_uplink_packet_loss_fraction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AudioNetworkAdaptation::set_has_uplink_packet_loss_fraction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AudioNetworkAdaptation::clear_has_uplink_packet_loss_fraction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AudioNetworkAdaptation::clear_uplink_packet_loss_fraction() {
  uplink_packet_loss_fraction_ = 0;
  clear_has_uplink_packet_loss_fraction();
}
inline float AudioNetworkAdaptation::uplink_packet_loss_fraction() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.uplink_packet_loss_fraction)
  return uplink_packet_loss_fraction_;
}
inline void AudioNetworkAdaptation::set_uplink_packet_loss_fraction(float value) {
  set_has_uplink_packet_loss_fraction();
  uplink_packet_loss_fraction_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.uplink_packet_loss_fraction)
}

// optional bool enable_fec = 4;
inline bool AudioNetworkAdaptation::has_enable_fec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AudioNetworkAdaptation::set_has_enable_fec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AudioNetworkAdaptation::clear_has_enable_fec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AudioNetworkAdaptation::clear_enable_fec() {
  enable_fec_ = false;
  clear_has_enable_fec();
}
inline bool AudioNetworkAdaptation::enable_fec() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.enable_fec)
  return enable_fec_;
}
inline void AudioNetworkAdaptation::set_enable_fec(bool value) {
  set_has_enable_fec();
  enable_fec_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.enable_fec)
}

// optional bool enable_dtx = 5;
inline bool AudioNetworkAdaptation::has_enable_dtx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AudioNetworkAdaptation::set_has_enable_dtx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AudioNetworkAdaptation::clear_has_enable_dtx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AudioNetworkAdaptation::clear_enable_dtx() {
  enable_dtx_ = false;
  clear_has_enable_dtx();
}
inline bool AudioNetworkAdaptation::enable_dtx() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.enable_dtx)
  return enable_dtx_;
}
inline void AudioNetworkAdaptation::set_enable_dtx(bool value) {
  set_has_enable_dtx();
  enable_dtx_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.enable_dtx)
}

// optional uint32 num_channels = 6;
inline bool AudioNetworkAdaptation::has_num_channels() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AudioNetworkAdaptation::set_has_num_channels() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AudioNetworkAdaptation::clear_has_num_channels() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AudioNetworkAdaptation::clear_num_channels() {
  num_channels_ = 0u;
  clear_has_num_channels();
}
inline ::yuntongxun_google::protobuf::uint32 AudioNetworkAdaptation::num_channels() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.AudioNetworkAdaptation.num_channels)
  return num_channels_;
}
inline void AudioNetworkAdaptation::set_num_channels(::yuntongxun_google::protobuf::uint32 value) {
  set_has_num_channels();
  num_channels_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.AudioNetworkAdaptation.num_channels)
}

// -------------------------------------------------------------------

// BweProbeCluster

// optional uint32 id = 1;
inline bool BweProbeCluster::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BweProbeCluster::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BweProbeCluster::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BweProbeCluster::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::yuntongxun_google::protobuf::uint32 BweProbeCluster::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeCluster.id)
  return id_;
}
inline void BweProbeCluster::set_id(::yuntongxun_google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeCluster.id)
}

// optional uint64 bitrate_bps = 2;
inline bool BweProbeCluster::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BweProbeCluster::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BweProbeCluster::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BweProbeCluster::clear_bitrate_bps() {
  bitrate_bps_ = GOOGLE_ULONGLONG(0);
  clear_has_bitrate_bps();
}
inline ::yuntongxun_google::protobuf::uint64 BweProbeCluster::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeCluster.bitrate_bps)
  return bitrate_bps_;
}
inline void BweProbeCluster::set_bitrate_bps(::yuntongxun_google::protobuf::uint64 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeCluster.bitrate_bps)
}

// optional uint32 min_packets = 3;
inline bool BweProbeCluster::has_min_packets() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BweProbeCluster::set_has_min_packets() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BweProbeCluster::clear_has_min_packets() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BweProbeCluster::clear_min_packets() {
  min_packets_ = 0u;
  clear_has_min_packets();
}
inline ::yuntongxun_google::protobuf::uint32 BweProbeCluster::min_packets() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeCluster.min_packets)
  return min_packets_;
}
inline void BweProbeCluster::set_min_packets(::yuntongxun_google::protobuf::uint32 value) {
  set_has_min_packets();
  min_packets_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeCluster.min_packets)
}

// optional uint32 min_bytes = 4;
inline bool BweProbeCluster::has_min_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BweProbeCluster::set_has_min_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BweProbeCluster::clear_has_min_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BweProbeCluster::clear_min_bytes() {
  min_bytes_ = 0u;
  clear_has_min_bytes();
}
inline ::yuntongxun_google::protobuf::uint32 BweProbeCluster::min_bytes() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeCluster.min_bytes)
  return min_bytes_;
}
inline void BweProbeCluster::set_min_bytes(::yuntongxun_google::protobuf::uint32 value) {
  set_has_min_bytes();
  min_bytes_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeCluster.min_bytes)
}

// -------------------------------------------------------------------

// BweProbeResult

// optional uint32 id = 1;
inline bool BweProbeResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BweProbeResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BweProbeResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BweProbeResult::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::yuntongxun_google::protobuf::uint32 BweProbeResult::id() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeResult.id)
  return id_;
}
inline void BweProbeResult::set_id(::yuntongxun_google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeResult.id)
}

// optional .webrtc.rtclog.BweProbeResult.ResultType result = 2;
inline bool BweProbeResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BweProbeResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BweProbeResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BweProbeResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::yuntongxunwebrtc::rtclog::BweProbeResult_ResultType BweProbeResult::result() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeResult.result)
  return static_cast< ::yuntongxunwebrtc::rtclog::BweProbeResult_ResultType >(result_);
}
inline void BweProbeResult::set_result(::yuntongxunwebrtc::rtclog::BweProbeResult_ResultType value) {
  assert(::yuntongxunwebrtc::rtclog::BweProbeResult_ResultType_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeResult.result)
}

// optional uint64 bitrate_bps = 3;
inline bool BweProbeResult::has_bitrate_bps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BweProbeResult::set_has_bitrate_bps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BweProbeResult::clear_has_bitrate_bps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BweProbeResult::clear_bitrate_bps() {
  bitrate_bps_ = GOOGLE_ULONGLONG(0);
  clear_has_bitrate_bps();
}
inline ::yuntongxun_google::protobuf::uint64 BweProbeResult::bitrate_bps() const {
  // @@protoc_insertion_point(field_get:webrtc.rtclog.BweProbeResult.bitrate_bps)
  return bitrate_bps_;
}
inline void BweProbeResult::set_bitrate_bps(::yuntongxun_google::protobuf::uint64 value) {
  set_has_bitrate_bps();
  bitrate_bps_ = value;
  // @@protoc_insertion_point(field_set:webrtc.rtclog.BweProbeResult.bitrate_bps)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rtclog
}  // namespace webrtc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rtc_5fevent_5flog_2eproto__INCLUDED
