/*
 *  Copyright (c) 2013 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree. An additional intellectual property rights grant can be found
 *  in the file PATENTS.  All contributing project authors may
 *  be found in the AUTHORS file in the root of the source tree.
 */

#ifndef WEBRTC_MODULES_DESKTOP_CAPTURE_DESKTOP_AND_CURSOR_COMPOSER_H_
#define WEBRTC_MODULES_DESKTOP_CAPTURE_DESKTOP_AND_CURSOR_COMPOSER_H_

#include "scoped_ptr.h"
#include "desktop_capturer.h"
#include "mouse_cursor_monitor.h"

namespace cloopenwebrtc {

// A wrapper for DesktopCapturer that also captures mouse using specified
// MouseCursorMonitor and renders it on the generated streams.
class DesktopAndCursorComposer : public DesktopCapturer,
                            public DesktopCapturer::Callback,
                            public MouseCursorMonitor::Callback {
 public:
  // Creates a new blender that captures mouse cursor using |mouse_monitor| and
  // renders it into the frames generated by |desktop_capturer|. If
  // |mouse_monitor| is NULL the frames are passed unmodified. Takes ownership
  // of both arguments.
  DesktopAndCursorComposer(DesktopCapturer* desktop_capturer,
                      MouseCursorMonitor* mouse_monitor);
  virtual ~DesktopAndCursorComposer();

  // DesktopCapturer interface.
  void Start(DesktopCapturer::Callback* callback) ;
  void Capture(const DesktopRegion& region) ;
  void SetExcludedWindow(WindowId window) ;
  bool GetShareCaptureRect(int &width, int &height);

  //Reset Screen Capture DC.
  void ResetScreenDC();

 private:
  // DesktopCapturer::Callback interface.
  SharedMemory* CreateSharedMemory(size_t size) ;
  void OnCaptureCompleted(DesktopFrame* frame, CaptureErrCode errCode = kCapture_Ok, DesktopRect *window_rect = NULL) ;

  // MouseCursorMonitor::Callback interface.
  void OnMouseCursor(MouseCursor* cursor) ;
  void OnMouseCursorPosition(MouseCursorMonitor::CursorState state,
                             const DesktopVector& position) ;

  cloopenwebrtc::scoped_ptr<DesktopCapturer> desktop_capturer_;
  cloopenwebrtc::scoped_ptr<MouseCursorMonitor> mouse_monitor_;

  DesktopCapturer::Callback* callback_;

  cloopenwebrtc::scoped_ptr<MouseCursor> cursor_;
  MouseCursorMonitor::CursorState cursor_state_;
  DesktopVector cursor_position_;

  DISALLOW_COPY_AND_ASSIGN(DesktopAndCursorComposer);
};

}  // namespace cloopenwebrtc

#endif  // WEBRTC_MODULES_DESKTOP_CAPTURE_DESKTOP_AND_CURSOR_COMPOSER_H_
